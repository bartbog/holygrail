// Problem p13

vocabulary V {
    type assumptiontype = {0..33} isa int
    assumption_satisfied(assumptiontype)

    type dollar = {750; 1000; 1250; 1500; 1750} isa int
    type piece constructed from {the_other_piece, valencia, waldarama, tombawomba, sniffletoe}
    type type1 constructed from {kelly, isabel, lucas, nicole, herman}
    type type2 constructed from {the_other_type2, vancouver, ypsilanti, mexico_city, st_moritz}
    type type3 = {-250; 250; -500; 500; -750; 750; -1000; 1000} isa int // differences between values of type dollar

    cost(piece, dollar)
    go_to(piece, type2)
    from(piece, type1)
    is_linked_with_1(dollar, type1)
    is_linked_with_2(dollar, type2)
    is_linked_with_3(type1, type2)
}

vocabulary VExtra {
    extern vocabulary V
    ct_cost(piece, dollar)
    cf_cost(piece, dollar)
    ct_go_to(piece, type2)
    cf_go_to(piece, type2)
    ct_from(piece, type1)
    cf_from(piece, type1)
    ct_is_linked_with_1(dollar, type1)
    cf_is_linked_with_1(dollar, type1)
    ct_is_linked_with_2(dollar, type2)
    cf_is_linked_with_2(dollar, type2)
    ct_is_linked_with_3(type1, type2)
    cf_is_linked_with_3(type1, type2)
}

structure S : V {
        assumption_satisfied<cf>={}
        assumption_satisfied<u>={}
}

theory T1: V {
    // Kelly's piece didn't cost $1250
    assumption_satisfied( 0  ) => ?a [piece]: ~ cost(a,1250) & from(a,kelly).
}

theory T2: V {
    // Valencia cost somewhat more than Isabel's dummy
    assumption_satisfied( 0  ) => ?b [type3] c [dollar] d [piece] e [dollar]: b>0 & cost(d,c) & from(d,isabel) & e = c+b & cost(valencia,e).
}

theory T3: V {
    // The puppet going to Vancouver, the $750 dummy and the $1500 piece are three different dummies
    assumption_satisfied( 0  ) => ?f [piece] g [piece] h [piece]: ~ (f = g) & ~ (f = h) & ~ (g = h) & go_to(f,vancouver) & cost(g,750) & cost(h,1500).
}

theory T4: V {
    // Waldarama didn't cost $750 or $1500
    assumption_satisfied( 0  ) => ~ (cost(waldarama,750) | cost(waldarama,1500)).
}

theory T5: V {
    // Kelly's puppet isn't going to Ypsilanti
    assumption_satisfied( 0  ) => ?i [piece]: ~ go_to(i,ypsilanti) & from(i,kelly).
}

theory T6: V {
    // The dummy going to Mexico City is either Tombawomba or Lucas's puppet
    assumption_satisfied( 0  ) => ?j [piece]: go_to(j,mexico_city) & (tombawomba = j | (?k [piece]: k = j & from(k,lucas))).
}

theory T7: V {
    // Nicole's puppet, the $1000 piece and the puppet going to Ypsilanti are three different dummies
    assumption_satisfied( 0  ) => ?l [piece] m [piece] n [piece]: ~ (l = m) & ~ (l = n) & ~ (m = n) & from(l,nicole) & cost(m,1000) & go_to(n,ypsilanti).
}

theory T8: V {
    // Of the $750 puppet and the piece going to Mexico City, one is Tombawomba and the other is Isabel's puppet
    assumption_satisfied( 0  ) => ?o [piece] p [piece]: go_to(p,mexico_city) & ~ (o = p) & ((?q [piece]: tombawomba = o & q = p & from(q,isabel)) | (?r [piece]: tombawomba = p & r = o & from(r,isabel))) & cost(o,750).
}

theory T9: V {
    // The puppet going to Ypsilanti cost $250 more than the puppet going to St. Moritz.
    assumption_satisfied( 0  ) => ?s [piece] t [dollar] u [piece] v [dollar]: go_to(s,ypsilanti) & go_to(u,st_moritz) & cost(u,t) & v = t+250 & cost(s,v).
}

theory T10: V {
    // Of the $1000 dummy and the $1250 dummy, one is from Herman and the other is going to Mexico City
    assumption_satisfied( 0  ) => ?w [piece] x [piece]: ~ (w = x) & (from(w,herman) & go_to(x,mexico_city) | from(x,herman) & go_to(w,mexico_city)) & cost(x,1250) & cost(w,1000).
}

theory T11: V {
    // Sniffletoe sold for $1000
    assumption_satisfied( 0  ) => cost(sniffletoe,1000).
}


theory bijections1 : V {
     assumption_satisfied( 1  ) => ! x [piece]: ?>=1 y [dollar]: cost(x, y).
}
theory bijections2 : V {
     assumption_satisfied( 2  ) => ! x [piece]: ?=<1 y [dollar]: cost(x, y).
}
theory bijections3 : V {
     assumption_satisfied( 3  ) => ! x [dollar]: ?>=1 y [piece]: cost(y, x).
}
theory bijections4 : V {
     assumption_satisfied( 4  ) => ! x [dollar]: ?=<1 y [piece]: cost(y, x).
}
theory bijections5 : V {
     assumption_satisfied( 5  ) => ! x [piece]: ?>=1 y [type2]: go_to(x, y).
}
theory bijections6 : V {
     assumption_satisfied( 6  ) => ! x [piece]: ?=<1 y [type2]: go_to(x, y).
}
theory bijections7 : V {
     assumption_satisfied( 7  ) => ! x [type2]: ?>=1 y [piece]: go_to(y, x).
}
theory bijections8 : V {
     assumption_satisfied( 8  ) => ! x [type2]: ?=<1 y [piece]: go_to(y, x).
}
theory bijections9 : V {
     assumption_satisfied( 9  ) => ! x [piece]: ?>=1 y [type1]: from(x, y).
}
theory bijections10 : V {
     assumption_satisfied( 10  ) => ! x [piece]: ?=<1 y [type1]: from(x, y).
}
theory bijections11 : V {
     assumption_satisfied( 11  ) => ! x [type1]: ?>=1 y [piece]: from(y, x).
}
theory bijections12 : V {
     assumption_satisfied( 12  ) => ! x [type1]: ?=<1 y [piece]: from(y, x).
}
theory bijections13 : V {
     assumption_satisfied( 13  ) => ! x [dollar]: ?>=1 y [type1]: is_linked_with_1(x, y).
}
theory bijections14 : V {
     assumption_satisfied( 14  ) => ! x [dollar]: ?=<1 y [type1]: is_linked_with_1(x, y).
}
theory bijections15 : V {
     assumption_satisfied( 15  ) => ! x [type1]: ?>=1 y [dollar]: is_linked_with_1(y, x).
}
theory bijections16 : V {
     assumption_satisfied( 16  ) => ! x [type1]: ?=<1 y [dollar]: is_linked_with_1(y, x).
}
theory bijections17 : V {
     assumption_satisfied( 17  ) => ! x [dollar]: ?>=1 y [type2]: is_linked_with_2(x, y).
}
theory bijections18 : V {
     assumption_satisfied( 18  ) => ! x [dollar]: ?=<1 y [type2]: is_linked_with_2(x, y).
}
theory bijections19 : V {
     assumption_satisfied( 19  ) => ! x [type2]: ?>=1 y [dollar]: is_linked_with_2(y, x).
}
theory bijections20 : V {
     assumption_satisfied( 20  ) => ! x [type2]: ?=<1 y [dollar]: is_linked_with_2(y, x).
}
theory bijections21 : V {
     assumption_satisfied( 21  ) => ! x [type1]: ?>=1 y [type2]: is_linked_with_3(x, y).
}
theory bijections22 : V {
     assumption_satisfied( 22  ) => ! x [type1]: ?=<1 y [type2]: is_linked_with_3(x, y).
}
theory bijections23 : V {
     assumption_satisfied( 23  ) => ! x [type2]: ?>=1 y [type1]: is_linked_with_3(y, x).
}
theory bijections24 : V {
     assumption_satisfied( 24  ) => ! x [type2]: ?=<1 y [type1]: is_linked_with_3(y, x).
}



theory synonyms : V {
    // Logigram synonym axioms:
    //! x [piece] y [dollar]: cost(x, y) <=> sold_for(x, y).

}


theory transitivity1 : V {
     assumption_satisfied( 25  ) => ! x y z: go_to(x, z) & is_linked_with_2(y, z)=>  cost(x, y).
}
theory transitivity2 : V {
     assumption_satisfied( 26  ) => ! x y z: ~ go_to(x, z) & is_linked_with_2(y, z)=> ~ cost(x, y).
}
theory transitivity3 : V {
     assumption_satisfied( 27  ) => ! x y z: go_to(x, z) & ~ is_linked_with_2(y, z)=> ~ cost(x, y).
}
theory transitivity4 : V {
     assumption_satisfied( 28  ) => ! x y z: from(x, z) & is_linked_with_1(y, z)=>  cost(x, y).
}
theory transitivity5 : V {
     assumption_satisfied( 29  ) => ! x y z:from(x, z) & ~ is_linked_with_1(y, z) => ~ cost(x, y).
}
theory transitivity6 : V {
     assumption_satisfied( 30  ) => ! x y z: ~ from(x, z) & is_linked_with_1(y, z)=> ~ cost(x, y).
}
theory transitivity7 : V {
     assumption_satisfied( 31  ) => ! x y z: is_linked_with_2(x, z) & is_linked_with_3(y, z)=>  is_linked_with_1(x, y).
}
theory transitivity8 : V {
     assumption_satisfied( 32  ) => ! x y z: ~is_linked_with_2(x, z) & is_linked_with_3(y, z)=> ~ is_linked_with_1(x, y).
}
theory transitivity9 : V {
     assumption_satisfied( 33  ) => ! x y z: is_linked_with_2(x, z) & ~is_linked_with_3(y, z)=> ~ is_linked_with_1(x, y).
}


theory forceSomethingWrongValue : VExtra {
    ~(
        (! x [piece] y [dollar]: ct_cost(x,y) => cost(x,y)) &
        (! x [piece] y [dollar]: cf_cost(x,y) => ~cost(x,y)) &
        (! x [piece] y [type2]: ct_go_to(x,y) => go_to(x,y)) &
        (! x [piece] y [type2]: cf_go_to(x,y) => ~go_to(x,y)) &
        (! x [piece] y [type1]: ct_from(x,y) => from(x,y)) &
        (! x [piece] y [type1]: cf_from(x,y) => ~from(x,y)) &
        (! x [dollar] y [type1]: ct_is_linked_with_1(x,y) => is_linked_with_1(x,y)) &
        (! x [dollar] y [type1]: cf_is_linked_with_1(x,y) => ~is_linked_with_1(x,y)) &
        (! x [dollar] y [type2]: ct_is_linked_with_2(x,y) => is_linked_with_2(x,y)) &
        (! x [dollar] y [type2]: cf_is_linked_with_2(x,y) => ~is_linked_with_2(x,y)) &
        (! x [type1] y [type2]: ct_is_linked_with_3(x,y) => is_linked_with_3(x,y)) &
        (! x [type1] y [type2]: cf_is_linked_with_3(x,y) => ~is_linked_with_3(x,y)) &
        true
    ).
}

procedure diff(S1, S2) {
    S3 = clone(S1)
    removeFrom(S3[V::cost], S2[V::cost].ct)
    removeFrom(S3[V::cost], S2[V::cost].cf)
    removeFrom(S3[V::go_to], S2[V::go_to].ct)
    removeFrom(S3[V::go_to], S2[V::go_to].cf)
    removeFrom(S3[V::from], S2[V::from].ct)
    removeFrom(S3[V::from], S2[V::from].cf)
    removeFrom(S3[V::is_linked_with_1], S2[V::is_linked_with_1].ct)
    removeFrom(S3[V::is_linked_with_1], S2[V::is_linked_with_1].cf)
    removeFrom(S3[V::is_linked_with_2], S2[V::is_linked_with_2].ct)
    removeFrom(S3[V::is_linked_with_2], S2[V::is_linked_with_2].cf)
    removeFrom(S3[V::is_linked_with_3], S2[V::is_linked_with_3].ct)
    removeFrom(S3[V::is_linked_with_3], S2[V::is_linked_with_3].cf)
    return S3
}

procedure getpredlist() {
    return {
        {V::cost, VExtra::ct_cost, VExtra::cf_cost},
        {V::go_to, VExtra::ct_go_to, VExtra::cf_go_to},
        {V::from, VExtra::ct_from, VExtra::cf_from},
        {V::is_linked_with_1, VExtra::ct_is_linked_with_1, VExtra::cf_is_linked_with_1},
        {V::is_linked_with_2, VExtra::ct_is_linked_with_2, VExtra::cf_is_linked_with_2},
        {V::is_linked_with_3, VExtra::ct_is_linked_with_3, VExtra::cf_is_linked_with_3},
    }
}

include "./generic_procedures-split.idp"

procedure main() {
    stdoptions.cpsupport = false

    theories = {
        {T1, "Kelly's piece didn't cost $1250"},
        {T2, "Valencia cost somewhat more than Isabel's dummy"},
        {T3, "The puppet going to Vancouver, the $750 dummy and the $1500 piece are three different dummies"},
        {T4, "Waldarama didn't cost $750 or $1500"},
        {T5, "Kelly's puppet isn't going to Ypsilanti"},
        {T6, "The dummy going to Mexico City is either Tombawomba or Lucas's puppet"},
        {T7, "Nicole's puppet, the $1000 piece and the puppet going to Ypsilanti are three different dummies"},
        {T8, "Of the $750 puppet and the piece going to Mexico City, one is Tombawomba and the other is Isabel's puppet"},
        {T9, "The puppet going to Ypsilanti cost $250 more than the puppet going to St. Moritz."},
        {T10, "Of the $1000 dummy and the $1250 dummy, one is from Herman and the other is going to Mexico City"},
        {T11, "Sniffletoe sold for $1000"},
    }

    S = compute_explanations(theories,S)

    os.exit(0)
}

procedure get_trans_theories(){
    transitivity_theories = {
        {transitivity1, "Transitivity constraint"}, 
        {transitivity2, "Transitivity constraint"}, 
        {transitivity3, "Transitivity constraint"}, 
        {transitivity4, "Transitivity constraint"}, 
        {transitivity5, "Transitivity constraint"}, 
        {transitivity6, "Transitivity constraint"}, 
        {transitivity7, "Transitivity constraint"}, 
        {transitivity8, "Transitivity constraint"}, 
        {transitivity9, "Transitivity constraint"}
    }
    return transitivity_theories
}

procedure get_bij_theories(){
    bijection_theories = {
        {bijections1, "Bijectivity"}, 
        {bijections2, "Bijectivity"}, 
        {bijections3, "Bijectivity"}, 
        {bijections4, "Bijectivity"}, 
        {bijections5, "Bijectivity"}, 
        {bijections6, "Bijectivity"}, 
        {bijections7, "Bijectivity"}, 
        {bijections8, "Bijectivity"}, 
        {bijections9, "Bijectivity"}, 
        {bijections10, "Bijectivity"}, 
        {bijections11, "Bijectivity"}, 
        {bijections12, "Bijectivity"}, 
        {bijections13, "Bijectivity"}, 
        {bijections14, "Bijectivity"}, 
        {bijections15, "Bijectivity"}, 
        {bijections16, "Bijectivity"}, 
        {bijections17, "Bijectivity"}, 
        {bijections18, "Bijectivity"}, 
        {bijections19, "Bijectivity"}, 
        {bijections20, "Bijectivity"}, 
        {bijections21, "Bijectivity"}, 
        {bijections22, "Bijectivity"}, 
        {bijections23, "Bijectivity"}, 
        {bijections24, "Bijectivity"} 
    }
    return  bijection_theories
}

