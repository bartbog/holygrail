
:- module(problemHolyGrail, [problem/2]).

problem(tias, problem(4, 4, [
        % "The 4 people were Tatum, the patient who was prescribed enalapril, the employee with the $54,000 salary, and the owner of the purple house",
% CHANGED TO: ( "with the salary")
        "The 4 people were tatum, the patient who was prescribed enalapril, the employee who earns 54000, and the owner of the purple house",
        "The patient who was prescribed enalapril is not heather",
        "The patient who was prescribed ramipril is not annabelle",
        "kassidy earns less than heather",
        "The owner of the blue house earns more than kassidy",
%%    "Of tatum and annabelle, one earns 144000 per year and the other lives in the cyan colored house",
%% CHANGED TO: (drop: colored)
        "Of tatum and annabelle, one earns 144000 per year and the other lives in the cyan house",
%%        "Either the employee with the 144000 salary or the employee with the 158000 salary lives in the blue colored house",
%% CHANGED TO: (drop colored, change the ...salara) 
        "Either the employee who earns 144000  or the employee who earns 158000 lives in the blue house",
        "The owner of the lime house was prescribed enalapril for their heart condition",
%%        "The employee with the 144000 salary was prescribed benazepril for their heart condition"
%% CHANGED TO:
        "The employee who earns 144000 was prescribed benazepril for their heart condition"
                     ], [
                        noun([patient], [patients]),
                        noun([person], [people]),
                        noun([year], [years]),
                        noun([employee], [employees]),
                        noun([salary], [salaries]),
                        noun([owner], [owners]),
                        pn([tatum]),
                        pn([annabelle]),
                        pn([heather]),
                        pn([kassidy]),
                        pn([benazepril]),
                        pn([enalapril]),
                        pn([ramipril]),
                        pn([fosinopril]),
                        prep([of]),
                        ppn([the, blue, house]),
                        ppn([the, lime, house]),
                        ppn([the, cyan, house]),
                        ppn([the, purple, house]),
                        tv([owns], [own]),
                        tvGap([earns], [per, year], [earn]),
                        tvGap([was, prescribed], [for, their, heart, condition], [prescribe]),
                        tvPrep([lives], [in], [live], [lived])
                     ])).

problem(p2_types, problem(4,5, [
                        "Of the contestant who scored 41 points and the person who threw the white darts, one was from Worthington and the other was Ira",
                        "Bill was from Mount union",
                        "Ira scored 21 points higher than the contestant from Worthington",
                        "Oscar scored somewhat higher than the player who threw the orange darts",
                        "The contestant from Mount union threw the black darts",
                        "Pedro didn't finish with 55 points",
                        "The player who threw the red darts was either Colin or the contestant who scored 48 points",
                        "Of the contestant who scored 41 points and the person who threw the orange darts, one was from Gillbertville and the other was from Worthington",
                        "Ira scored 7 points lower than the player from Lohrville"
        ], [
                        noun([contestant], [contestants]),
                        noun([person], [persons]),
                        noun([player], [players]),
                        noun([point], [points]),
                        pn([bill], A),
                        pn([colin], A),
                        pn([ira], A),
                        pn([oscar], A),
                        pn([pedro], A),
                        pn([mount, union], B),
                        pn([gillbertville], B),
                        pn([lohrville], B),
                        pn([worthington], B),
                        pn([yorktown], B),
                        ppn([the, black, darts], C),
                        ppn([the, orange, darts], C),
                        ppn([the, red, darts], C),
                        ppn([the, white, darts], C),
                        ppn([the, yellow, darts], C),
                        tv([threw], [throw]),
                        tv([scored], [score]),
                        tvPrep([finishes], [with], [finish], [finished]),
                        prep([from])
        ])).
    
problem(cookies_for_love, problem(5, 4, [
        "jackie 's last name was n't fredericks the cookies sold at bake sale were to help the cook family ",
        "the ginger snap cookies were not baked to help the hatfield family june whose last name was n't baker sponsored the adams family ",
        "ms smith whose first name was n't joyce made the chocolate chip cookies but she did n't sponsor the cook family ",
        "judy levinson did n't sell her cookies at the bake sale the ginger snaps were not baked by the woman sponsoring the adams family ",
        "the peanut butter cookies were banked to help the vanwert family but they were n't sold at the pot luck ",
        "joyce sold her cookies at the school play the sugar cookies were sold before and after sunday church "
                     ], [
    pn([sugar]),
    pn([smith]),
    pn([jackie]),
    pn([levinson]),
    pn([joyce]),
    pn([church]),
    pn([judy]),
    pn([ginger]),
    pn([bake]),
    pn([fredericks]),
    pn([baker]),
    pn([school]),
    pn([chocolate]),
    pn([peanut]),
    pn([pot]),
    pn([june]),
    ppn([the, adams, family]),
    ppn([the, hatfield, family]),
    ppn([the, cook, family]),
    ppn([the, vanwert, family]),
    noun([luck], [lucks]),
    noun([woman], [women]),
    noun([family], [families]),
    noun([chip], [chips]),
    noun([cookies], [cookies]),
    noun([name], [names]),
    noun([sale], [sales]),
    noun([butter], [butter]),
    noun([ms], [mss]),
    noun([snap], [snaps]),
    tv([sold], [sell]),
    tv([help], [help]),
    tv([sponsored], [sponsor]),
    tv([made], [make]),
    tv([sponsoring], [sponsor]),
    tvPrep([sold], [at], [sell], [todooo]),
    tvPrep([baked], [by], [bake], [todooo])
                     ])).


problem(expensive_homes, problem(4, 3, [
        "kassandra 's home is worth more than that of the person whose last name is holloway ",
        "the elm tree road resident owns the least valued home ",
        "alexandra lives in neither treelined boulevard nor elm tree road but in the most valued home ",
        "holt is not the last name of the wattle grove resident "
                     ], [
    pn([wattle]),
    pn([alexandra]),
    pn([holloway]),
    pn([melton]),
    pn([elm]),
    pn([treelines]),
    pn([angelo]),
    pn([kassandra]),
    pn([holt]),
    noun([tree], [trees]),
    noun([home], [homes]),
    noun([resident], [residents]),
    noun([life], [lives]),
    noun([name], [names]),
    noun([road], [roads]),
    noun([boulevard], [boulevards]),
    noun([person], [people]),
    noun([grove], [groves]),
    tvPrep([lives], [in], [live], [todooo]),
    tvPrep([name], [of], [name], [todooo]),
    tvPrep([is], [worth], [be], [todooo])
                     ])).


problem(at_the_farm, problem(4, 5, [
        "fran 's day to mend fences is neither tuesday nor thursday and is completed earlier in the week than at least one other person ",
        "the one who goes to market goes later in the week than carl and earlier in the morning than nan but later in the morning than fran ",
        "adam does not plant the corn or go to market his chore is completed before 9am but not before 6am on his assigned day of monday ",
        "no one performs a chore on thursday at 7am ",
        "mike 's chore is completed earlier in the day than at least 3 others but later in the week than at least three others ",
        "one of the boys collects eggs another boy milks bessie the goat ",
        "the milk is collected earlier in the week than the girl who plants the corn which is not planted before wednesday ",
        "the eggs must be collected at 7 am but never on mondays or fridays ",
        "all the other chores must be complete before mike goes to the market "
                     ], [
    pn([friday]),
    pn([corn]),
    pn([adam]),
    pn([wednesday]),
    pn([milk]),
    pn([market]),
    pn([thursday]),
    pn([mend]),
    pn([eggs]),
    pn([tuesday]),
    pn([mike]),
    pn([carl]),
    pn([monday]),
    pn([fran]),
    pn([nan]),
    noun([am], [am]),
    noun([other], [others]),
    noun([milk], [milks]),
    noun([fence], [fences]),
    noun([friday], [fridays]),
    noun([week], [weeks]),
    noun([monday], [mondays]),
    noun([plant], [plants]),
    noun([one], [ones]),
    noun([chore], [chores]),
    noun([boy], [boys]),
    noun([girl], [girls]),
    noun([morning], [mornings]),
    noun([day], [days]),
    noun([person], [people]),
    noun([goat], [goats]),
    tv([planted], [plant]),
    tv([go], [go]),
    tv([plants], [plant]),
    tv([plant], [plant]),
    tv([goes], [go]),
    tv([collects], [collect]),
    tvPrep([completed], [before], [complete], [todooo]),
    tvPrep([planted], [before], [plant], [todooo]),
    tvPrep([complete], [before], [complete], [todooo]),
    tvPrep([collected], [at], [collect], [todooo])
                     ])).


problem(tutorial, problem(4, 4, [
        "the 4 people were tatum the patient who was prescribed enalapril the employee with the 54000 salary and the owner of the purple house ",
        "of tatum and annabelle one earns 144000 per year and the other lives in the cyan house ",
        "the patient who was prescribed enalapril is not heather ",
        "either the employee with the 144000 salary or the employee with the 158000 salary lives in the blue house ",
        "kassidy earns less than heather ",
        "the owner of the blue house earns more than kassidy ",
        "the patient who was prescribed ramipril is not annabelle ",
        "the owner of the lime house was prescribed enalapril for their heart condition ",
        "the employee with the 144000 salary was prescribed benazepril for their heart condition "
                     ], [
    pn([tatum]),
    pn([heather]),
    pn([enalapril]),
    pn([ramipril]),
    pn([kassidy]),
    pn([benazepril]),
    pn([fosinopril]),
    pn([annabelle]),
    ppn([the, purple, house]),
    ppn([the, blue, house]),
    ppn([the, lime, house]),
    ppn([the, cyan, house]),
    noun([year], [years]),
    noun([owner], [owners]),
    noun([heart], [hearts]),
    noun([employee], [employees]),
    noun([life], [lives]),
    noun([salary], [salaries]),
    noun([patient], [patients]),
    noun([person], [people]),
    noun([house], [houses]),
    noun([condition], [conditions]),
    tv([people], [people]),
    tv([earns], [earn]),
    tv([is], [be]),
    tvPrep([lives], [in], [live], [todooo]),
    tvGap([was, prescribed], [for, their, heart, condition], [prescribe])
                     ])).


problem(new_shoes, problem(4, 3, [
        "the pumps were not pink ",
        "the boots were brown but were n't purchased by margaret ",
        "clarisse did n't buy the pumps but spent more than sally ",
        "margaret got the sandals which cost twice as much as sally 's purchase but were n't green "
                     ], [
    pn([margaret]),
    pn([sandals]),
    pn([boots]),
    pn([sally]),
    pn([pink]),
    pn([pumps]),
    pn([clarisse]),
    pn([brown]),
    pn([green]),
    noun([purchase], [purchases]),
    tv([boots], [boot]),
    tv([got], [get]),
    tv([were], [be])
                     ])).


problem(cats_in_spring, problem(4, 3, [
        "batman chose the female who liked to chase a ball but she was not starbuck ",
        "dibii 's companion liked to chase the laser light ",
        "ruby loved to cuddle up to her male for a long afternoon nap in the sun ",
        "starbuck had two more kittens than batman 's companion "
                     ], [
    pn([spot]),
    pn([starbuck]),
    pn([batman]),
    pn([lazer]),
    pn([ball]),
    pn([jake]),
    pn([dibii]),
    pn([ruby]),
    pn([sleep]),
    noun([nap], [naps]),
    noun([male], [males]),
    noun([female], [females]),
    noun([light], [lights]),
    noun([companion], [companions]),
    noun([kitten], [kittens]),
    noun([laser], [lasers]),
    noun([afternoon], [afternoons]),
    noun([sun], [suns]),
    tv([had], [have]),
    tv([kittens], [kitten]),
    tv([chase], [chase]),
    tv([was], [be]),
    tvPrep([kittens], [than], [kitten], [todooo]),
    tvPrep([nap], [in], [nap], [todooo])
                     ])).


problem(a_bargain, problem(4, 3, [
        "the blue item was not bought by benny ",
        "daniella was pleased to have 900 knocked off the she bought ",
        "the red item had more knocked off than the umbrella ",
        "the trousers did not have 500 knocked off and were not bought by benny or carla "
                     ], [
    pn([daniella]),
    pn([carla]),
    pn([trousers]),
    pn([jacket]),
    pn([umbrella]),
    pn([benny]),
    ppn([the, green, item]),
    ppn([the, blue, item]),
    ppn([the, red, item]),
    noun([item], [items]),
    tv([have], [have]),
    tv([bought], [buy]),
    tvPrep([bought], [by], [buy], [todooo]),
    tvPrep([knocked], [off], [knock], [todooo])
                     ])).


problem(class_is_in, problem(4, 5, [
        "the math class is either mr. ramon 's or mrs. townsend 's ",
        "the spanish class is n't taught by mr young ",
        "the math class has 6 more students than the spanish class ",
        "of the biology class and the with 25 students one is in room 214 and the other is taught by townsend ",
        "the with 23 students is the algebra class ",
        "the course in room 112 has fewer students than the algebra class ",
        "the with 27 students is n't taught by young ",
        "the statistics class has 6 more students than the in room 228 ",
        "the with 27 students is n't taught by mr hartwood ",
        "neither the math class nor the algebra class is the in room 142 "
                     ], [
    pn([142]),
    pn([228]),
    pn([214]),
    pn([hartwood]),
    pn([ramon]),
    pn([134]),
    pn([young]),
    pn([townsend]),
    pn([zellerman]),
    pn([112]),
    ppn([the, biology, class]),
    ppn([the, algebra, class]),
    ppn([the, math, class]),
    ppn([the, statistics, class]),
    ppn([the, spanish, class]),
    noun([class], [classes]),
    noun([course], [courses]),
    noun([mr], [mrs]),
    noun([room], [rooms]),
    noun([student], [students]),
    tv([has], [have]),
    tv([is], [be]),
    tvPrep([course], [in], [course], [todooo]),
    tvPrep([taught], [by], [teach], [todooo]),
    tvPrep([is], [in], [be], [todooo])
                     ])).


problem(remodeling_fun, problem(5, 4, [
        "paul and his wife decided that their kitchen needed a serious remodel jack who lived in dallas was n't married to sasha franks last name was n't johnson ",
        "the who decided the den would be the best place to begin lived in detroit ",
        "peter who 's last name was the engle couple married to jenny ",
        "the jackson couple lived in san jose but they did not remodel their dining room ",
        "paul and claudia were not one of the couples the smith couple not have her den remodeled ",
        "the engles had their bathroom remodeled but they did n't own a house in tampa "
                     ], [
    pn([dallas]),
    pn([san]),
    pn([peter]),
    pn([detroit]),
    pn([bathroom]),
    pn([jack]),
    pn([sasha]),
    pn([tampa]),
    pn([jenny]),
    pn([kitchen]),
    pn([den]),
    pn([dining]),
    pn([stephany]),
    pn([frank]),
    pn([paul]),
    pn([claudia]),
    ppn([the, smith, couple]),
    ppn([the, engle, couple]),
    ppn([the, johnson, couple]),
    ppn([the, jackson, couple]),
    noun([place], [places]),
    noun([frank], [franks]),
    noun([wife], [wives]),
    noun([remodel], [remodels]),
    noun([name], [names]),
    noun([jose], [joses]),
    noun([couple], [couples]),
    noun([engle], [engles]),
    noun([room], [rooms]),
    noun([house], [houses]),
    tv([couples], [couple]),
    tv([house], [house]),
    tv([have], [have]),
    tv([remodel], [remodel]),
    tv([had], [have]),
    tv([decided], [decide]),
    tv([lived], [live]),
    tvPrep([lived], [in], [live], [todooo]),
    tvPrep([house], [in], [house], [todooo]),
    tvPrep([decided], [that], [decide], [todooo])
                     ])).


problem(christmas_presents, problem(4, 5, [
        "neither cliff nor jennifer lives in kent ",
        "young crawford asked for the pony ",
        "young rowlands does not live in yorkshire and did not ask for a bicycle ",
        "the gift due for delivery to cornwall is a computer ",
        "the computer is not for the child surnamed rowlands ",
        "liz who has asked for the painting set is not from kent her surname is not jamison ",
        "the child who lives in essex has asked for a guitar ",
        "alan lives in cumbria ",
        "sarah 's surname is not crawford ",
        "jennifer 's surname is feather "
                     ], [
    pn([cliff]),
    pn([rowlands]),
    pn([guitar]),
    pn([liz]),
    pn([cornwall]),
    pn([alan]),
    pn([jennifer]),
    pn([kent]),
    pn([sarah]),
    pn([crawford]),
    pn([bicycle]),
    pn([northey]),
    pn([jamison]),
    pn([pony]),
    pn([yorkshire]),
    pn([computer]),
    pn([feather]),
    pn([essex]),
    pn([cumbria]),
    pn([paint]),
    noun([gift], [gifts]),
    noun([life], [lives]),
    noun([surname], [surnames]),
    noun([child], [children]),
    noun([painting], [paintings]),
    noun([delivery], [deliveries]),
    noun([set], [sets]),
    tv([lives], [live]),
    tv([live], [live]),
    tv([is], [be]),
    tvPrep([asked], [for], [ask], [todooo]),
    tvPrep([lives], [in], [live], [todooo]),
    tvPrep([ask], [for], [ask], [todooo]),
    tvPrep([live], [in], [live], [todooo])
                     ])).


problem(star_students, problem(4, 3, [
        "ms knight who was n't trained as a teacher was an actress in the film magic ",
        "laura is a news anchor ",
        "susan niven never had any ambition to be a nurse ",
        "it is n't the one time student teacher who now presents current affairs programmes "
                     ], [
    pn([nurse]),
    pn([donna]),
    pn([presenter]),
    pn([lawyer]),
    pn([knight]),
    pn([susan]),
    pn([robins]),
    pn([lauren]),
    pn([niven]),
    pn([actress]),
    pn([teacher]),
    pn([news]),
    noun([student], [students]),
    noun([ambition], [ambitions]),
    noun([affair], [affairs]),
    noun([film], [films]),
    noun([m], [ms]),
    noun([magic], [magics]),
    noun([anchor], [anchors]),
    noun([programme], [programmes]),
    noun([time], [times]),
    noun([laura], [lauras]),
    tv([time], [time]),
    tv([was], [be]),
    tv([be], [be]),
    tv([is], [be]),
    tvPrep([trained], [as], [train], [todooo])
                     ])).


problem(baggage_mishaps, problem(4, 3, [
        "the three girls are savannah the american citizen the yellow suitcase and the one traveling to america ",
        "carmelita wants her to stand out so she is not the person with the black suitcase ",
        "of the girl with the yellow suitcase and savannah one is traveling to panama and the other is the american citizen ",
        "gloria is neither the american citizen nor the one going to france and she does not have the black suitcase "
                     ], [
    pn([america]),
    pn([gloria]),
    pn([carmelita]),
    pn([panama]),
    pn([france]),
    pn([savannah]),
    ppn([the, francen, citizen]),
    ppn([the, panaman, citizen]),
    ppn([the, american, citizen]),
    ppn([the, yellow, suitcase]),
    ppn([the, black, suitcase]),
    ppn([the, green, suitcase]),
    noun([traveling], [travelings]),
    noun([suitcase], [suitcases]),
    noun([girl], [girls]),
    noun([person], [people]),
    noun([citizen], [citizens]),
    tv([are], [be]),
    tv([going], [go]),
    tv([have], [have]),
    tv([is], [be]),
    tvPrep([out], [so], [out], [todooo])
                     ])).


problem(planetary_gazing, problem(4, 4, [
        "the person who moved to tampa is not jill ",
        "the friend with the 122000 salary is sally ",
        "the friend who moved to tampa did n't observe saturn or mercury through her telescope ",
        "the friend who moved to houston earns less than her friend in tampa ",
        "the friend with the 95000 salary now lives in los angles ",
        "either the friend living in los angles or the friend who moved to houston caught a great view of jupiter through her telescope ",
        "the friend who 's job is in houston is not jill and she did n't observe saturn through her telescope ",
        "the friend who lives in tampa earns more than the friend who pointed her telescope at jupiter ",
        "the woman living in los angles did n't observe mercury through her telescope and is not jill ",
        "of joann and the amateur astronomer who pointed her telescope at saturn one now lives in houston and the other earns 56000 per year ",
        "the one with the 122000 salary did n't observe mercury through her telescope ",
        "the person living near in tampa is not joann ",
        "the person who found employment in detroit is not becky "
                     ], [
    pn([detroit]),
    pn([los]),
    pn([mars]),
    pn([becky]),
    pn([sally]),
    pn([saturn]),
    pn([jupiter]),
    pn([tampa]),
    pn([mercury]),
    pn([joann]),
    pn([houston]),
    pn([jill]),
    noun([angle], [angles]),
    noun([telescope], [telescopes]),
    noun([job], [jobs]),
    noun([woman], [women]),
    noun([year], [years]),
    noun([caught], [caughts]),
    noun([living], [livings]),
    noun([view], [views]),
    noun([one], [ones]),
    noun([friend], [friends]),
    noun([salary], [salaries]),
    noun([astronomer], [astronomers]),
    noun([employment], [employments]),
    noun([person], [people]),
    tv([moved], [move]),
    tv([earns], [earn]),
    tv([lives], [live]),
    tv([telescope], [telescope]),
    tv([living], [live]),
    tv([view], [view]),
    tv([is], [be]),
    tvPrep([living], [in], [live], [todooo]),
    tvPrep([is], [in], [be], [todooo]),
    tvPrep([living], [near], [live], [todooo]),
    tvPrep([telescope], [at], [telescope], [todooo]),
    tvPrep([view], [of], [view], [todooo]),
    tvPrep([lives], [in], [live], [todooo])
                     ])).


problem(bart, problem(4, 4, [
        "the 4 people were tatum the patient who was prescribed enalapril the person who earns 54000 and the person who owns the purple house ",
        "of tatum and annabelle one earns 144000 per year and the other lives in the cyan house ",
        "the patient who was prescribed enalapril is not heather ",
        "either the employee who earns 144000 or the employee who earns 158000 lives in the blue house ",
        "kassidy earns less than heather ",
        "the owner of the blue house earns more than kassidy ",
        "the patient who was prescribed ramipril is not annabelle ",
        "the owner of the lime house was prescribed enalapril for their heart condition ",
        "the employee who earns 144000 was prescribed benazepril for their heart condition "
                     ], [
    pn([tatum]),
    pn([heather]),
    pn([enalapril]),
    pn([ramipril]),
    pn([kassidy]),
    pn([benazepril]),
    pn([fosinopril]),
    pn([annabelle]),
    ppn([the, purple, house]),
    ppn([the, blue, house]),
    ppn([the, lime, house]),
    ppn([the, cyan, house]),
    noun([year], [years]),
    noun([owner], [owners]),
    noun([heart], [hearts]),
    noun([employee], [employees]),
    noun([life], [lives]),
    noun([patient], [patients]),
    noun([person], [people]),
    noun([house], [houses]),
    noun([condition], [conditions]),
    tv([owns], [own]),
    tv([people], [people]),
    tv([earns], [earn]),
    tv([is], [be]),
    tvPrep([lives], [in], [live], [todooo]),
    tvGap([was, prescribed], [for, their, heart, condition], [prescribe])
                     ])).


problem(be_my_valentine, problem(4, 3, [
        "unluckily for freddie when miss jetson received her she thought it was from adam ",
        "when molly received a blue card she told miss hanson and together they worked out who the was from it did n't occur to either of them that it was from freddie ",
        "the girl who received the red was convinced it came from ethan ",
        "neither millie nor miss motson received a pink card "
                     ], [
    pn([]),
    pn([ethan]),
    pn([lily]),
    pn([dylan]),
    pn([molly]),
    pn([millie]),
    pn([motson]),
    pn([hanson]),
    pn([jetson]),
    ppn([a, pink, card]),
    ppn([a, blue, card]),
    ppn([a,  red, card]),
    noun([card], [cards]),
    noun([freddie], [freddies]),
    noun([girl], [girls]),
    noun([miss], [misses]),
    noun([adam], [adams]),
    tv([told], [tell]),
    tv([came], [come]),
    tv([received], [receive]),
    tv([miss], [miss]),
    tvPrep([was], [from], [be], [todooo]),
    tvPrep([came], [from], [come], [todooo])
                     ])).


problem(dragon_slayer, problem(4, 5, [
        "both sir percival and the knight who slew the welsh dragon had green in their colors ",
        "the knight that battled the ancient dragon wore colors of blue white ",
        "neither sir dane or sir richard had green in their colors ",
        "sir gwain fought the irish dragon ",
        "the knight that slew the ancient dragon bore the shield ",
        "the knights that carried an axe and a sword both had white in their colors ",
        "an arrow from the bow pierced the english dragon ",
        "one of the knights who had green in their colors carried the bow ",
        "both sir richard and sir gwain had red in their colors ",
        "the irish dragon was slain with a sword "
                     ], [
    pn([mace]),
    pn([green]),
    pn([sir]),
    pn([axe]),
    pn([bow]),
    pn([blue]),
    pn([sword]),
    pn([shield]),
    pn([red]),
    ppn([the, ancient, dragon]),
    ppn([the, welsh, dragon]),
    ppn([the, english, dragon]),
    ppn([the, scottish, dragon]),
    ppn([the, irish, dragon]),
    noun([arrow], [arrows]),
    noun([dane], [danes]),
    noun([richard], [richards]),
    noun([percival], [percivals]),
    noun([dragon], [dragons]),
    noun([gwain], [gwains]),
    noun([knight], [knights]),
    noun([color], [colors]),
    tv([bore], [bore]),
    tv([had], [have]),
    tv([fought], [fight]),
    tv([battled], [battle]),
    tv([carried], [carry]),
    tvPrep([green], [in], [green], [todooo]),
    tvPrep([colors], [of], [color], [todooo])
                     ])).


problem(kids_at_play, problem(4, 3, [
        "tommy was always upset to be called in for dinner before the other 2 boys ",
        "the jones boy had dinner ready later than 6:00pm ",
        "of dickey and the jackson boy one loved playing red light green light and the other 's dinner was at 6:00pm sharp ",
        "the jackson boy did n't like hide and seek as much as tommy ",
        "harry always had 15 alone once the others were called in ",
        "the smith boy have 15 minutes to read the newspaper after work before dinner was on the table at 5:30pm ",
        "the jones boy playing tag "
                     ], [
    pn([6:00]),
    pn([tag]),
    pn([6:15]),
    pn([5:30]),
    pn([hide/seek]),
    pn([harry]),
    pn([dickey]),
    pn([tommy]),
    pn([red]),
    ppn([the, smith, boy]),
    ppn([the, jones, boy]),
    ppn([the, jackson, boy]),
    noun([playing], [playings]),
    noun([dinner], [dinners]),
    noun([other], [others]),
    noun([light], [lights]),
    noun([newspaper], [newspapers]),
    noun([table], [tables]),
    noun([boy], [boys]),
    noun([minute], [minutes]),
    noun([hide], [hides]),
    noun([work], [works]),
    tv([had], [have]),
    tv([have], [have]),
    tv([loved], [love]),
    tvPrep([called], [in], [call], [todooo]),
    tvPrep([was], [on], [be], [todooo]),
    tvPrep([was], [at], [be], [todooo]),
    tvPrep([table], [at], [table], [todooo]),
    tvPrep([work], [before], [work], [todooo])
                     ])).


problem(classroom_blues, problem(4, 3, [
        "the student being moved farthest from the front of the classroom gets in trouble for throwing airplanes ",
        "mr. williams taught his son how to build paper airplanes ",
        "gloria has a hard time staying awake in class ",
        "raymond pierce is being moved closest to the door "
                     ], [
    pn([sleeping]),
    pn([raymond]),
    pn([near]),
    pn([sharp]),
    pn([throwing]),
    pn([front]),
    pn([williams]),
    pn([gloria]),
    pn([michael]),
    pn([back]),
    pn([pierce]),
    pn([talking]),
    noun([son], [sons]),
    noun([class], [classes]),
    noun([paper], [papers]),
    noun([door], [doors]),
    noun([classroom], [classrooms]),
    noun([trouble], [troubles]),
    noun([time], [times]),
    noun([awake], [awakes]),
    noun([airplane], [airplanes]),
    noun([student], [students]),
    tv([trouble], [trouble]),
    tvPrep([gets], [in], [get], [todooo]),
    tvPrep([front], [of], [front], [todooo]),
    tvPrep([trouble], [for], [trouble], [todooo])
                     ])).


problem(trick_or_treating, problem(5, 4, [
        "of the 4 children there was the 8 year old the child who dressed as a werewolf the child who was accompanied by their sister and the one who carried a red flashlight ",
        "between the 9 year old and frank who is older than toby one was dressed as a goblin and the other carried a green flashlight ",
        "neither frank nor judy were accompanied by their sister while trick or treating judy did not carry a orange flashlight ",
        "toby 's mother was upset that he cut up one of her favorite sheets to create his ghost costume ",
        "the child who dressed as a werewolf was accompanied by a male and did not carry a green flashlight ",
        "the nine year old was quite happy with her goblin costume which she spent an entire week designing ",
        "either frank or toby carried a green flashlight ",
        "the child who was accompanied by their brother was exactly 2 years older than the child who went with their sister ",
        "jessica caught her uncle sneaking candy from her bag while they walked ",
        "the child dressed as a ghost carried a blue flashlight "
                     ], [
    pn([judy]),
    pn([aunt]),
    pn([brother]),
    pn([toby]),
    pn([uncle]),
    pn([werewolf]),
    pn([jessica]),
    pn([goblin]),
    pn([vampire]),
    pn([frank]),
    pn([sister]),
    pn([ghost]),
    ppn([a, blue, flashlight]),
    ppn([a, green, flashlight]),
    ppn([a, orange, flashlight]),
    ppn([a, red, flashlight]),
    noun([trick], [tricks]),
    noun([male], [males]),
    noun([designing], [designings]),
    noun([year], [years]),
    noun([week], [weeks]),
    noun([sheet], [sheets]),
    noun([costume], [costumes]),
    noun([one], [ones]),
    noun([child], [children]),
    noun([mother], [mothers]),
    noun([flashlight], [flashlights]),
    noun([bag], [bags]),
    noun([candy], [candies]),
    tv([create], [create]),
    tv([frank], [frank]),
    tv([treating], [treat]),
    tv([carry], [carry]),
    tv([caught], [catch]),
    tv([carried], [carry]),
    tvPrep([dressed], [as], [dress], [todooo]),
    tvPrep([accompanied], [by], [accompany], [todooo]),
    tvPrep([upset], [that], [upset], [todooo]),
    tvPrep([went], [with], [go], [todooo]),
    tvPrep([bag], [while], [bag], [todooo])
                     ])).


problem(greek_dogs, problem(4, 5, [
        "the 5 people were jenny the person married in 1929 the person with the att cell phone the person who named their dog cassiopeia and julie ",
        "the person with the sprint cell phone got married after the person who named their dog agamemnon ",
        "the person who named their dog hephaestus got married before the person who named their dog agamemnon ",
        "the person who named their dog cassiopeia got married after the person with the tmobile cell phone ",
        "the person with the att cell phone is not jason ",
        "the person married in 1976 is james ",
        "of the person with the sprint cell phone and jason one got married in 1946 and the other named their dog agamemnon ",
        "the person married in 1982 named their dog lycurgus ",
        "the person who named their dog lycurgus is not josie or jenny ",
        "either the person with the nextel cell phone or the person with the sprint cell phone is james "
                     ], [
    pn([lycurgus]),
    pn([josie]),
    pn([james]),
    pn([julie]),
    pn([jenny]),
    pn([hephaestus]),
    pn([endymion]),
    pn([jason]),
    pn([cassiopeia]),
    pn([agamemnon]),
    ppn([the, nextel, cell]),
    ppn([the, verizon, cell]),
    ppn([the, att, cell]),
    ppn([the, sprint, cell]),
    ppn([the, tmobile, cell]),
    noun([phone], [phones]),
    noun([dog], [dogs]),
    noun([person], [people]),
    noun([cell], [cells]),
    tv([people], [people]),
    tv([is], [be]),
    tvPrep([married], [in], [marry], [todooo]),
    tvPrep([married], [after], [marry], [todooo]),
    tvPrep([married], [before], [marry], [todooo])
                     ])).


problem(time_to_quit, problem(4, 5, [
        "the people subscriber the person who grows kiwis the employee whose last day will be july 8 the people subscriber trenton and the person who grows guavas ",
        "the time subscriber will leave before the newsweek subscriber ",
        "the time subscriber does n't grow guavas ",
        "the time subscriber will leave before ricky ",
        "of trenton and the person who grows apples one is leaving the company on september 23 and the other subscribed to usweekly ",
        "the person who grows boysenberries is trenton ",
        "bianca will leave after roger ",
        "the newsweek subscriber is not ricky ",
        "the person who grows kiwis is not roger ",
        "either the employee whose last day will be january 13 or the employee whose last day will be september 23 grows strawberries ",
        "the usweekly subscriber is bianca "
                     ], [
    pn([charlie]),
    pn([apples]),
    pn([january]),
    pn([bianca]),
    pn([roger]),
    pn([september]),
    pn([strawberries]),
    pn([kiwis]),
    pn([august]),
    pn([july]),
    pn([boysenberries]),
    pn([ricky]),
    pn([guavas]),
    pn([may]),
    pn([trenton]),
    ppn([the, usweekly, subscriber]),
    ppn([the, fortune, subscriber]),
    ppn([the, people, subscriber]),
    ppn([the, newsweek, subscriber]),
    ppn([the, time, subscriber]),
    noun([subscriber], [subscribers]),
    noun([company], [companies]),
    noun([employee], [employees]),
    noun([day], [days]),
    noun([person], [people]),
    noun([grow], [grows]),
    tv([subscribed], [subscribe]),
    tv([grows], [grow]),
    tv([will], [will]),
    tv([people], [people]),
    tv([company], [company]),
    tv([is], [be]),
    tvPrep([leave], [before], [leave], [todooo]),
    tvPrep([company], [on], [company], [todooo]),
    tvPrep([leave], [after], [leave], [todooo])
                     ])).


problem(breakfast_time, problem(4, 3, [
        "the person who read the newspaper had breakfast later than the person who liked to listen to the news on the radio ",
        "jennifer had her breakfast directly before the person who had toast ",
        "cereal was eaten 20 minutes after the person who watched the breakfast news on tv ",
        "claudia 's black coffee was not the breakfast taken last "
                     ], [
    pn([6:50]),
    pn([coffee]),
    pn([jennifer]),
    pn([television]),
    pn([cereal]),
    pn([newspaper]),
    pn([radio]),
    pn([6:30]),
    pn([7:15]),
    pn([claudia]),
    pn([toast]),
    pn([steph]),
    noun([tv], [tvs]),
    noun([breakfast], [breakfasts]),
    noun([news], [news]),
    noun([minute], [minutes]),
    noun([person], [people]),
    tv(['s], [be]),
    tv([read], [read])
                     ])).


problem(a_michigan_adventure, problem(4, 5, [
        "the couple who toured the fort did n't buy the fudge jodie loved what alex and alyssa frost bought ",
        "jack 's horse almost threw him off but he and his wife still managed to have a good time peter who is n't married to tracy wanted to go sight seeing with alex but he went kayaking with his wife instead ",
        "of the five couples there are mr and mrs. hartford the couple who bought the fudge jodie smothers alex and the couple who went horseback riding ",
        "the couple who went site seeing bought a beautiful the lighthouse jodie one of the local gift shops the lighthouse jodie suzy 's model ship were voted the best of the souvenirs ",
        "the couple who went site seeing bought a beautiful the lighthouse jodie one of the local gift shops the lighthouse jodie suzy 's model ship were voted the best of the souvenirs ",
        "mark who is not married to jodie liked the maple syrup that jack bought allen bought the postcards "
                     ], [
    pn([allen]),
    pn([peter]),
    pn([jodie]),
    pn([alice]),
    pn([sight]),
    pn([horseback]),
    pn([fort]),
    pn([model]),
    pn([jack]),
    pn([bicycling]),
    pn([tracy]),
    pn([alyssa]),
    pn([maple]),
    pn([alex]),
    pn([kayaking]),
    pn([mark]),
    pn([suzy]),
    ppn([the, model ship, jodie]),
    ppn([the, fudge, jodie]),
    ppn([the, maple syrup, jodie]),
    ppn([the, lighthouse, jodie]),
    ppn([the, postcards, jodie]),
    noun([smother], [smothers]),
    noun([horse], [horses]),
    noun([site], [sites]),
    noun([ship], [ships]),
    noun([riding], [ridings]),
    noun([syrup], [syrups]),
    noun([gift], [gifts]),
    noun([wife], [wives]),
    noun([souvenir], [souvenirs]),
    noun([couple], [couples]),
    noun([mr], [mr]),
    noun([frost], [frosts]),
    noun([time], [times]),
    noun([hartford], [hartfords]),
    tv([go], [go]),
    tv([toured], [tour]),
    tv([time], [time]),
    tv([shops], [shop]),
    tv([liked], [like]),
    tv([fudge], [fudge]),
    tv(['s], [be]),
    tv([went], [go]),
    tv([bought], [buy]),
    tv([loved], [love]),
    tv([jack], [jack]),
    tv([married], [marry]),
    tv([smothers], [smother]),
    tvPrep([seeing], [with], [see], [todooo]),
    tvPrep([kayaking], [with], [kayak], [todooo])
                     ])).


problem(piracy, problem(4, 3, [
        "the saucy sue is not the ship of the buccaneer who lost his left hand and who spent 4 years living on coconut milk and fish ",
        "the buccaneer with only one eye spent the longest time marooned but was not captain stump ",
        "mean mike lost a leg after a cutlass wound went septic ",
        "grey beard 's ship is called big bess "
                     ], [
    pn([grey]),
    pn([mean]),
    pn([leg]),
    pn([suacy]),
    pn([big]),
    pn([merry]),
    pn([eye]),
    pn([hand]),
    pn([captain]),
    noun([bess], [besses]),
    noun([wound], [wounds]),
    noun([saucy], [saucies]),
    noun([mike], [mikes]),
    noun([ship], [ships]),
    noun([year], [years]),
    noun([milk], [milks]),
    noun([fish], [fish]),
    noun([sue], [sues]),
    noun([stump], [stumps]),
    noun([coconut], [coconuts]),
    noun([beard], [beards]),
    noun([cutlass], [cutlasses]),
    noun([time], [times]),
    noun([buccaneer], [buccaneers]),
    tv([lost], [lose]),
    tv([was], [be]),
    tv([spent], [spend]),
    tvPrep([ship], [of], [ship], [todooo]),
    tvPrep([living], [on], [live], [todooo]),
    tvPrep([buccaneer], [with], [buccaneer], [todooo])
                     ])).


problem(breakfast_at_tiffanys, problem(4, 4, [
        "samantha had a bowl of cereal but not a latte ",
        "the friend who ordered the potato pancakes also ordered a coffee to go but did n't have an ice tea ",
        "the woman who ordered the omelet had apple juice to drink but she was n't jenny ",
        "of the two friends who ordered the orange juice and the ice tea one was jackie and the other was the friend who ordered the french toast ",
        "the friend who ordered a bottle of water to go did n't order orange juice ",
        "judy ordered a lemonade to go "
                     ], [
    pn([oj]),
    pn([judy]),
    pn([coffee]),
    pn([omlet]),
    pn([cereal]),
    pn([f.]),
    pn([pancakes]),
    pn([water]),
    pn([apple]),
    pn([samantha]),
    pn([ice]),
    pn([c]),
    pn([latte]),
    pn([jenny]),
    pn([lemonade]),
    pn([jackie]),
    noun([bottle], [bottles]),
    noun([woman], [women]),
    noun([tea], [teas]),
    noun([bowl], [bowls]),
    noun([omelet], [omelets]),
    noun([friend], [friends]),
    noun([order], [orders]),
    noun([toast], [toasts]),
    noun([potato], [potatoes]),
    noun([juice], [juices]),
    noun([orange], [oranges]),
    tv([had], [have]),
    tv([bowl], [bowl]),
    tv([ordered], [order]),
    tv([bottle], [bottle]),
    tv([was], [be]),
    tvPrep([bottle], [of], [bottle], [todooo]),
    tvPrep([bowl], [of], [bowl], [todooo])
                     ])).


problem(beach_bum, problem(4, 4, [
        "alexandra found a lovely sharks tooth 3 years after the souvenir she bought on topsail island ",
        "the conch shell was n't found in 2007 ",
        "of the souvenir she purchased in 2013 and the one she bought in long beach one is the sharks tooth and the other was purchased at saltys marina ",
        "she simply could n't resist the hula girl that swayed back and forth that she saw either while she was in santa barbara or while staying on topsail island ",
        "while on south padre island she either purchased the hula girl or visited island gifts ",
        "she either purchased the pearl bracelet in 2004 or while she was browsing at ocean treasures ",
        "neither the souvenir purchased while on south padre island nor the conch shell is the souvenir found in 2004 ",
        "the souvenir she found while on topsail island was n't from ocean treasures "
                     ], [
    pn([saltys]),
    pn([hula]),
    pn([topsail]),
    pn([long]),
    pn([pearl]),
    pn([sharks]),
    pn([conch]),
    pn([s.]),
    pn([santa]),
    pn([island]),
    pn([beach]),
    pn([ocean]),
    noun([alexandra], [alexandras]),
    noun([bracelet], [bracelets]),
    noun([barbara], [barbaras]),
    noun([shell], [shells]),
    noun([year], [years]),
    noun([padre], [padres]),
    noun([forth], [forths]),
    noun([gift], [gifts]),
    noun([treasure], [treasures]),
    noun([souvenir], [souvenirs]),
    noun([girl], [girls]),
    noun([marina], [marinas]),
    tv([beach], [beach]),
    tv([staying], [stay]),
    tv([was], [be]),
    tv([bought], [buy]),
    tv([visited], [visit]),
    tv([is], [be]),
    tvPrep([n't], [from], [be], [todooo]),
    tvPrep([bought], [in], [buy], [todooo]),
    tvPrep([was], [in], [be], [todooo]),
    tvPrep([bought], [on], [buy], [todooo]),
    tvPrep([found], [in], [find], [todooo]),
    tvPrep([browsing], [at], [browse], [todooo]),
    tvPrep([found], [while], [find], [todooo]),
    tvPrep([staying], [on], [stay], [todooo])
                     ])).


problem(pet_or_no_pet, problem(4, 3, [
        "neither girl lives in the odd-numbered house ",
        "the spaniel does not live at number 24 nor with sammy ",
        "sarah who is not the oldest lives furthest from number 15 ",
        "the girl whose age and house number match does not have a pet "
                     ], [
    pn([spaniel]),
    pn([terrier]),
    pn([sally]),
    pn([sammy]),
    pn([sarah]),
    pn([no]),
    noun([age], [ages]),
    noun([match], [matches]),
    noun([pet], [pets]),
    noun([life], [lives]),
    noun([girl], [girls]),
    noun([number], [numbers]),
    noun([house], [houses]),
    tv([number], [number]),
    tvPrep([lives], [in], [live], [todooo]),
    tvPrep([live], [at], [live], [todooo])
                     ])).


