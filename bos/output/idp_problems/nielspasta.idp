// Problem nielspasta

vocabulary V {
    type type1 constructed from {the_other_type1, arrabiata_sauce, marinara_sauce, puttanesca_sauce}
    type person constructed from {angie, damon, claudia, elisa}
    type dollar = {4; 8; 12; 16} isa int
    type type2 constructed from {capellini, farfalle, tagliolini, rotini}
    type type3 = {-4; 4; -8; 8; -12; 12} isa int // differences between values of type dollar
    type type4 = {-4; 4; -8; 8; -12; 12} isa int // differences between values of type dollar
    type type5 = {-4; 4; -8; 8; -12; 12} isa int // differences between values of type dollar

    chose(person, type1)
    paid(person, dollar)
    ordered(person, type2)
    is_linked_with_1(type1, dollar)
    is_linked_with_2(type1, type2)
    is_linked_with_3(dollar, type2)
}

vocabulary VExtra {
    extern vocabulary V
    ct_chose(person, type1)
    cf_chose(person, type1)
    ct_paid(person, dollar)
    cf_paid(person, dollar)
    ct_ordered(person, type2)
    cf_ordered(person, type2)
    ct_is_linked_with_1(type1, dollar)
    cf_is_linked_with_1(type1, dollar)
    ct_is_linked_with_2(type1, type2)
    cf_is_linked_with_2(type1, type2)
    ct_is_linked_with_3(dollar, type2)
    cf_is_linked_with_3(dollar, type2)
}

structure S : V {
}

theory T1: V {
    // The person who ordered capellini paid less than the person who chose arrabiata sauce
    ?a [person] b [type3] c [dollar] d [person] e [dollar]: ordered(a,capellini) & b>0 & chose(d,arrabiata_sauce) & paid(d,c) & e = c-b & paid(a,e).
}

theory T2: V {
    // The person who chose arrabiata sauce ordered farfalle
    ?f [person]: chose(f,arrabiata_sauce) & ordered(f,farfalle).
}

theory T3: V {
    // The person who ordered tagliolini paid less than the person who chose marinara sauce
    ?g [person] h [type4] i [dollar] j [person] k [dollar]: ordered(g,tagliolini) & h>0 & chose(j,marinara_sauce) & paid(j,i) & k = i-h & paid(g,k).
}

theory T4: V {
    // The person who ordered tagliolini paid more than Angie
    ?l [person] m [type5] n [dollar] o [dollar]: ordered(l,tagliolini) & m>0 & paid(angie,n) & o = n+m & paid(l,o).
}

theory T5: V {
    // The person who ordered rotini is either the person who paid $8 more than Damon or the person who paid $8 less than Damon
    ?p [person]: ordered(p,rotini) & ((?q [person] r [dollar] s [dollar]: paid(damon,r) & s = r+8 & paid(q,s) & q = p) | (?t [person] u [dollar] v [dollar]: paid(damon,u) & v = u-8 & paid(t,v) & t = p)).
}

theory T6: V {
    // Claudia did not choose puttanesca sauce
    ~ chose(claudia,puttanesca_sauce).
}

theory T7: V {
    // The person who ordered capellini is either Damon or Claudia
    ?w [person]: ordered(w,capellini) & (damon = w | claudia = w).
}

theory T8: V {
    // The person who chose arrabiata sauce is either Angie or Elisa
    ?x [person]: chose(x,arrabiata_sauce) & (angie = x | elisa = x).
}

theory bijections : V {
    // Logigram bijection axioms:
    ! x [person]: ?=1 y [type1]: chose(x, y).
    ! x [type1]: ?=1 y [person]: chose(y, x).

    ! x [person]: ?=1 y [dollar]: paid(x, y).
    ! x [dollar]: ?=1 y [person]: paid(y, x).

    ! x [person]: ?=1 y [type2]: ordered(x, y).
    ! x [type2]: ?=1 y [person]: ordered(y, x).

    ! x [type1]: ?=1 y [dollar]: is_linked_with_1(x, y).
    ! x [dollar]: ?=1 y [type1]: is_linked_with_1(y, x).

    ! x [type1]: ?=1 y [type2]: is_linked_with_2(x, y).
    ! x [type2]: ?=1 y [type1]: is_linked_with_2(y, x).

    ! x [dollar]: ?=1 y [type2]: is_linked_with_3(x, y).
    ! x [type2]: ?=1 y [dollar]: is_linked_with_3(y, x).

}
theory synonyms : V {
    // Logigram synonym axioms:

}
theory transitivity : V {
    // Logigram transitive relation axioms:
    ! x [person] y [type1]: chose(x, y) <=> ? z [dollar]: paid(x, z) & is_linked_with_1(y, z).
    ! x [person] y [type1]: chose(x, y) <=> ? z [type2]: ordered(x, z) & is_linked_with_2(y, z).
    ! x [person] y [dollar]: paid(x, y) <=> ? z [type2]: ordered(x, z) & is_linked_with_3(y, z).
    ! x [type1] y [dollar]: is_linked_with_1(x, y) <=> ? z [type2]: is_linked_with_2(x, z) & is_linked_with_3(y, z).

    // Logigram reflexive relation axioms:

    // Logigram symmetry breaking axioms:
}

theory forceSomethingWrongValue : VExtra {
    ~(
        (! x [person] y [type1]: ct_chose(x,y) => chose(x,y)) &
        (! x [person] y [type1]: cf_chose(x,y) => ~chose(x,y)) &
        (! x [person] y [dollar]: ct_paid(x,y) => paid(x,y)) &
        (! x [person] y [dollar]: cf_paid(x,y) => ~paid(x,y)) &
        (! x [person] y [type2]: ct_ordered(x,y) => ordered(x,y)) &
        (! x [person] y [type2]: cf_ordered(x,y) => ~ordered(x,y)) &
        (! x [type1] y [dollar]: ct_is_linked_with_1(x,y) => is_linked_with_1(x,y)) &
        (! x [type1] y [dollar]: cf_is_linked_with_1(x,y) => ~is_linked_with_1(x,y)) &
        (! x [type1] y [type2]: ct_is_linked_with_2(x,y) => is_linked_with_2(x,y)) &
        (! x [type1] y [type2]: cf_is_linked_with_2(x,y) => ~is_linked_with_2(x,y)) &
        (! x [dollar] y [type2]: ct_is_linked_with_3(x,y) => is_linked_with_3(x,y)) &
        (! x [dollar] y [type2]: cf_is_linked_with_3(x,y) => ~is_linked_with_3(x,y)) &
        true
    ).
}

procedure diff(S1, S2) {
    S3 = clone(S1)
    removeFrom(S3[V::chose], S2[V::chose].ct)
    removeFrom(S3[V::chose], S2[V::chose].cf)
    removeFrom(S3[V::paid], S2[V::paid].ct)
    removeFrom(S3[V::paid], S2[V::paid].cf)
    removeFrom(S3[V::ordered], S2[V::ordered].ct)
    removeFrom(S3[V::ordered], S2[V::ordered].cf)
    removeFrom(S3[V::is_linked_with_1], S2[V::is_linked_with_1].ct)
    removeFrom(S3[V::is_linked_with_1], S2[V::is_linked_with_1].cf)
    removeFrom(S3[V::is_linked_with_2], S2[V::is_linked_with_2].ct)
    removeFrom(S3[V::is_linked_with_2], S2[V::is_linked_with_2].cf)
    removeFrom(S3[V::is_linked_with_3], S2[V::is_linked_with_3].ct)
    removeFrom(S3[V::is_linked_with_3], S2[V::is_linked_with_3].cf)
    return S3
}

procedure getpredlist() {
    return {
        {V::chose, VExtra::ct_chose, VExtra::cf_chose},
        {V::paid, VExtra::ct_paid, VExtra::cf_paid},
        {V::ordered, VExtra::ct_ordered, VExtra::cf_ordered},
        {V::is_linked_with_1, VExtra::ct_is_linked_with_1, VExtra::cf_is_linked_with_1},
        {V::is_linked_with_2, VExtra::ct_is_linked_with_2, VExtra::cf_is_linked_with_2},
        {V::is_linked_with_3, VExtra::ct_is_linked_with_3, VExtra::cf_is_linked_with_3},
    }
}

include "./generic_procedures.idp"

procedure main() {
    stdoptions.cpsupport = false

    theories = {
        {T1, "The person who ordered capellini paid less than the person who chose arrabiata sauce"},
        {T2, "The person who chose arrabiata sauce ordered farfalle"},
        {T3, "The person who ordered tagliolini paid less than the person who chose marinara sauce"},
        {T4, "The person who ordered tagliolini paid more than Angie"},
        {T5, "The person who ordered rotini is either the person who paid $8 more than Damon or the person who paid $8 less than Damon"},
        {T6, "Claudia did not choose puttanesca sauce"},
        {T7, "The person who ordered capellini is either Damon or Claudia"},
        {T8, "The person who chose arrabiata sauce is either Angie or Elisa"},
    }

    test(theories,S)
    S = explanationLoop(theories,S,true,theories,true)

    os.exit(0)
}

