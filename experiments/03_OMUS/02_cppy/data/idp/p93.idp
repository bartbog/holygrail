// Problem p93

vocabulary V {
    type assumptiontype = {0..36} isa int
    assumption_satisfied(assumptiontype)

    type linkedin_connection = {57; 59; 64; 68; 78} isa int
    type person constructed from {opal, neil, rosie, arnold, georgia}
    type facebook_friend = {120; 130; 140; 150; 160} isa int
    type twitter_follower = {589; 707; 715; 789; 809} isa int
    type type1 = {-10; 10; -20; 20; -30; 30; -40; 40} isa int // differences between values of type facebook_friend

    connected_to(person, linkedin_connection)
    with(person, facebook_friend)
    followed_by(person, twitter_follower)
    is_linked_with_1(linkedin_connection, facebook_friend)
    is_linked_with_2(linkedin_connection, twitter_follower)
    is_linked_with_3(facebook_friend, twitter_follower)
}

vocabulary VExtra {
    extern vocabulary V
    ct_connected_to(person, linkedin_connection)
    cf_connected_to(person, linkedin_connection)
    ct_with(person, facebook_friend)
    cf_with(person, facebook_friend)
    ct_followed_by(person, twitter_follower)
    cf_followed_by(person, twitter_follower)
    ct_is_linked_with_1(linkedin_connection, facebook_friend)
    cf_is_linked_with_1(linkedin_connection, facebook_friend)
    ct_is_linked_with_2(linkedin_connection, twitter_follower)
    cf_is_linked_with_2(linkedin_connection, twitter_follower)
    ct_is_linked_with_3(facebook_friend, twitter_follower)
    cf_is_linked_with_3(facebook_friend, twitter_follower)
}

structure S : V {
        assumption_satisfied<cf>={}
        assumption_satisfied<u>={}
}

theory T1: V {
    // Opal is connected to 64 LinkedIn connections
    assumption_satisfied( 0  ) => connected_to(opal,64).
}

theory T2: V {
    // The person followed by 809 Twitter followers, the person with 140 facebook friends and the person connected to 78 linkedin connections are three different people
    assumption_satisfied( 0  ) => ?a [person] b [person] c [person]: ~ (a = b) & ~ (a = c) & ~ (b = c) & followed_by(a,809) & with(b,140) & connected_to(c,78).
}

theory T3: V {
    // Of rosie and neil, one is connected to 68 linkedin connections and the other is followed by 789 twitter followers
    assumption_satisfied( 0  ) => ~ (rosie = neil) & (connected_to(rosie,68) & followed_by(neil,789) | connected_to(neil,68) & followed_by(rosie,789)).
}

theory T4: V {
    // The person connected to 57 linkedin connections has 10 facebook friends less than the person followed by 715 twitter followers
    assumption_satisfied( 0  ) => ?d [person] e [facebook_friend] f [person] g [facebook_friend]: connected_to(d,57) & followed_by(f,715) & with(f,e) & g = e-10 & with(d,g).
}

theory T5: V {
    // Arnold isn't followed by 589 twitter followers
    assumption_satisfied( 0  ) => ~ followed_by(arnold,589).
}

theory T6: V {
    // The person followed by 809 twitter followers isn't connected to 68 linkedin connections
    assumption_satisfied( 0  ) => ?h [person]: followed_by(h,809) & ~ connected_to(h,68).
}

theory T7: V {
    // Of the person connected to 57 linkedin connections and arnold, one has 140 facebook friends and the other is followed by 789 twitter followers
    assumption_satisfied( 0  ) => ?i [person]: connected_to(i,57) & ~ (i = arnold) & (with(i,140) & followed_by(arnold,789) | with(arnold,140) & followed_by(i,789)).
}

theory T8: V {
    // opal doesn't have 150 facebook friends
    assumption_satisfied( 0  ) => ~ with(opal,150).
}

theory T9: V {
    // the person connected to 57 linkedin connections has 10 facebook friends less than georgia
    assumption_satisfied( 0  ) => ?j [person] k [facebook_friend] l [facebook_friend]: connected_to(j,57) & with(georgia,k) & l = k-10 & with(j,l).
}

theory T10: V {
    // The person with 130 facebook friends is either arnold or the person followed by 715 twitter followers
    assumption_satisfied( 0  ) => ?m [person]: with(m,130) & (arnold = m | (?n [person]: followed_by(n,715) & n = m)).
}

theory T11: V {
    // the person followed by 789 twitter followers has somewhat less than rosie
    assumption_satisfied( 0  ) => ?o [person] p [type1] q [facebook_friend] r [facebook_friend]: followed_by(o,789) & p>0 & with(rosie,q) & r = q-p & with(o,r).
}

theory bijections1 : V {
     assumption_satisfied( 1  ) => ! x [person]: ?>=1 y [linkedin_connection]: connected_to(x, y).
}
theory bijections2 : V {
     assumption_satisfied( 2  ) => ! x [person]: ?=<1 y [linkedin_connection]: connected_to(x, y).
}
theory bijections3 : V {
     assumption_satisfied( 3  ) => ! x [linkedin_connection]: ?>=1 y [person]: connected_to(y, x).
}
theory bijections4 : V {
     assumption_satisfied( 4  ) => ! x [linkedin_connection]: ?=<1 y [person]: connected_to(y, x).
}
theory bijections5 : V {
     assumption_satisfied( 5  ) => ! x [person]: ?>=1 y [facebook_friend]: with(x, y).
}
theory bijections6 : V {
     assumption_satisfied( 6  ) => ! x [person]: ?=<1 y [facebook_friend]: with(x, y).
}
theory bijections7 : V {
     assumption_satisfied( 7  ) => ! x [facebook_friend]: ?>=1 y [person]: with(y, x).
}
theory bijections8 : V {
     assumption_satisfied( 8  ) => ! x [facebook_friend]: ?=<1 y [person]: with(y, x).
}
theory bijections9 : V {
     assumption_satisfied( 9  ) => ! x [person]: ?>=1 y [twitter_follower]: followed_by(x, y).
}
theory bijections10 : V {
     assumption_satisfied( 10  ) => ! x [person]: ?=<1 y [twitter_follower]: followed_by(x, y).
}
theory bijections11 : V {
     assumption_satisfied( 11  ) => ! x [twitter_follower]: ?>=1 y [person]: followed_by(y, x).
}
theory bijections12 : V {
     assumption_satisfied( 12  ) => ! x [twitter_follower]: ?=<1 y [person]: followed_by(y, x).
}
theory bijections13 : V {
     assumption_satisfied( 13  ) => ! x [linkedin_connection]: ?>=1 y [facebook_friend]: is_linked_with_1(x, y).
}
theory bijections14 : V {
     assumption_satisfied( 14  ) => ! x [linkedin_connection]: ?=<1 y [facebook_friend]: is_linked_with_1(x, y).
}
theory bijections15 : V {
     assumption_satisfied( 15  ) => ! x [facebook_friend]: ?>=1 y [linkedin_connection]: is_linked_with_1(y, x).
}
theory bijections16 : V {
     assumption_satisfied( 16  ) => ! x [facebook_friend]: ?=<1 y [linkedin_connection]: is_linked_with_1(y, x).
}
theory bijections17 : V {
     assumption_satisfied( 17  ) => ! x [linkedin_connection]: ?>=1 y [twitter_follower]: is_linked_with_2(x, y).
}
theory bijections18 : V {
     assumption_satisfied( 18  ) => ! x [linkedin_connection]: ?=<1 y [twitter_follower]: is_linked_with_2(x, y).
}
theory bijections19 : V {
     assumption_satisfied( 19  ) => ! x [twitter_follower]: ?>=1 y [linkedin_connection]: is_linked_with_2(y, x).
}
theory bijections20 : V {
     assumption_satisfied( 20  ) => ! x [twitter_follower]: ?=<1 y [linkedin_connection]: is_linked_with_2(y, x).
}
theory bijections21 : V {
     assumption_satisfied( 21  ) => ! x [facebook_friend]: ?>=1 y [twitter_follower]: is_linked_with_3(x, y).
}
theory bijections22 : V {
     assumption_satisfied( 22  ) => ! x [facebook_friend]: ?=<1 y [twitter_follower]: is_linked_with_3(x, y).
}
theory bijections23 : V {
     assumption_satisfied( 23  ) => ! x [twitter_follower]: ?>=1 y [facebook_friend]: is_linked_with_3(y, x).
}
theory bijections24 : V {
     assumption_satisfied( 24  ) => ! x [twitter_follower]: ?=<1 y [facebook_friend]: is_linked_with_3(y, x).
}

theory synonyms : V {
    // Logigram synonym axioms:
    //! x [person] y [facebook_friend]: with(x, y) <=> with(x, y).

}

theory transitivity1 : V {
     assumption_satisfied( 25  ) => ! x y z: with(x, z) & is_linked_with_1(y, z) =>  connected_to(x, y).
}
theory transitivity2 : V {
     assumption_satisfied( 26  ) => ! x y z: ~ with(x, z) & is_linked_with_1(y, z) => ~ connected_to(x, y).
}
theory transitivity3 : V {
     assumption_satisfied( 27  ) => ! x y z: with(x, z) & ~ is_linked_with_1(y, z) => ~ connected_to(x, y).
}
theory transitivity4 : V {
     assumption_satisfied( 28  ) => ! x y z: followed_by(x, z) & is_linked_with_2(y, z) =>  connected_to(x, y).
}
theory transitivity5 : V {
     assumption_satisfied( 29  ) => ! x y z: ~ followed_by(x, z) & is_linked_with_2(y, z) => ~ connected_to(x, y).
}
theory transitivity6 : V {
     assumption_satisfied( 30  ) => ! x y z: followed_by(x, z) & ~ is_linked_with_2(y, z) => ~ connected_to(x, y).
}
theory transitivity7 : V {
     assumption_satisfied( 31  ) => ! x y z: followed_by(x, z) & is_linked_with_3(y, z) =>  with(x, y).
}
theory transitivity8 : V {
     assumption_satisfied( 32  ) => ! x y z: followed_by(x, z) & ~ is_linked_with_3(y, z) => ~ with(x, y).
}
theory transitivity9 : V {
     assumption_satisfied( 33  ) => ! x y z: ~ followed_by(x, z) & is_linked_with_3(y, z) => ~ with(x, y).
}
theory transitivity10 : V {
     assumption_satisfied( 34  ) => ! x y z: is_linked_with_2(x, z) & is_linked_with_3(y, z) =>  is_linked_with_1(x, y).
}
theory transitivity11 : V {
     assumption_satisfied( 35  ) => ! x y z: ~ is_linked_with_2(x, z) & is_linked_with_3(y, z) => ~ is_linked_with_1(x, y).
}
theory transitivity12 : V {
     assumption_satisfied( 36  ) => ! x y z: is_linked_with_2(x, z) & ~ is_linked_with_3(y, z) => ~ is_linked_with_1(x, y).
}

theory forceSomethingWrongValue : VExtra {
    ~(
        (! x [person] y [linkedin_connection]: ct_connected_to(x,y) => connected_to(x,y)) &
        (! x [person] y [linkedin_connection]: cf_connected_to(x,y) => ~connected_to(x,y)) &
        (! x [person] y [facebook_friend]: ct_with(x,y) => with(x,y)) &
        (! x [person] y [facebook_friend]: cf_with(x,y) => ~with(x,y)) &
        (! x [person] y [twitter_follower]: ct_followed_by(x,y) => followed_by(x,y)) &
        (! x [person] y [twitter_follower]: cf_followed_by(x,y) => ~followed_by(x,y)) &
        (! x [linkedin_connection] y [facebook_friend]: ct_is_linked_with_1(x,y) => is_linked_with_1(x,y)) &
        (! x [linkedin_connection] y [facebook_friend]: cf_is_linked_with_1(x,y) => ~is_linked_with_1(x,y)) &
        (! x [linkedin_connection] y [twitter_follower]: ct_is_linked_with_2(x,y) => is_linked_with_2(x,y)) &
        (! x [linkedin_connection] y [twitter_follower]: cf_is_linked_with_2(x,y) => ~is_linked_with_2(x,y)) &
        (! x [facebook_friend] y [twitter_follower]: ct_is_linked_with_3(x,y) => is_linked_with_3(x,y)) &
        (! x [facebook_friend] y [twitter_follower]: cf_is_linked_with_3(x,y) => ~is_linked_with_3(x,y)) &
        true
    ).
}

procedure diff(S1, S2) {
    S3 = clone(S1)
    removeFrom(S3[V::connected_to], S2[V::connected_to].ct)
    removeFrom(S3[V::connected_to], S2[V::connected_to].cf)
    removeFrom(S3[V::with], S2[V::with].ct)
    removeFrom(S3[V::with], S2[V::with].cf)
    removeFrom(S3[V::followed_by], S2[V::followed_by].ct)
    removeFrom(S3[V::followed_by], S2[V::followed_by].cf)
    removeFrom(S3[V::is_linked_with_1], S2[V::is_linked_with_1].ct)
    removeFrom(S3[V::is_linked_with_1], S2[V::is_linked_with_1].cf)
    removeFrom(S3[V::is_linked_with_2], S2[V::is_linked_with_2].ct)
    removeFrom(S3[V::is_linked_with_2], S2[V::is_linked_with_2].cf)
    removeFrom(S3[V::is_linked_with_3], S2[V::is_linked_with_3].ct)
    removeFrom(S3[V::is_linked_with_3], S2[V::is_linked_with_3].cf)
    return S3
}

procedure getpredlist() {
    return {
        {V::connected_to, VExtra::ct_connected_to, VExtra::cf_connected_to},
        {V::with, VExtra::ct_with, VExtra::cf_with},
        {V::followed_by, VExtra::ct_followed_by, VExtra::cf_followed_by},
        {V::is_linked_with_1, VExtra::ct_is_linked_with_1, VExtra::cf_is_linked_with_1},
        {V::is_linked_with_2, VExtra::ct_is_linked_with_2, VExtra::cf_is_linked_with_2},
        {V::is_linked_with_3, VExtra::ct_is_linked_with_3, VExtra::cf_is_linked_with_3},
    }
}

include "./generic_procedures-split.idp"

procedure main() {
    stdoptions.cpsupport = false

    theories = {
        {T1, "Opal is connected to 64 LinkedIn connections"},
        {T2, "The person followed by 809 Twitter followers, the person with 140 facebook friends and the person connected to 78 linkedin connections are three different people"},
        {T3, "Of rosie and neil, one is connected to 68 linkedin connections and the other is followed by 789 twitter followers"},
        {T4, "The person connected to 57 linkedin connections has 10 facebook friends less than the person followed by 715 twitter followers"},
        {T5, "Arnold isn't followed by 589 twitter followers"},
        {T6, "The person followed by 809 twitter followers isn't connected to 68 linkedin connections"},
        {T7, "Of the person connected to 57 linkedin connections and arnold, one has 140 facebook friends and the other is followed by 789 twitter followers"},
        {T8, "opal doesn't have 150 facebook friends"},
        {T9, "the person connected to 57 linkedin connections has 10 facebook friends less than georgia"},
        {T10, "The person with 130 facebook friends is either arnold or the person followed by 715 twitter followers"},
        {T11, "the person followed by 789 twitter followers has somewhat less than rosie"},
    }
    S = compute_explanations(theories,S)

    os.exit(0)
}

procedure get_trans_theories(){
    transitivity_theories = {
        {transitivity1, "Transitivity constraint"}, 
        {transitivity2, "Transitivity constraint"}, 
        {transitivity3, "Transitivity constraint"}, 
        {transitivity4, "Transitivity constraint"}, 
        {transitivity5, "Transitivity constraint"}, 
        {transitivity6, "Transitivity constraint"}, 
        {transitivity7, "Transitivity constraint"}, 
        {transitivity8, "Transitivity constraint"}, 
        {transitivity9, "Transitivity constraint"}, 
        {transitivity10, "Transitivity constraint"}, 
        {transitivity11, "Transitivity constraint"}, 
        {transitivity12, "Transitivity constraint"}, 
    }
    return transitivity_theories
}

procedure get_bij_theories(){
    bijection_theories = {
        {bijections1, "Bijectivity"}, 
        {bijections2, "Bijectivity"}, 
        {bijections3, "Bijectivity"}, 
        {bijections4, "Bijectivity"}, 
        {bijections5, "Bijectivity"}, 
        {bijections6, "Bijectivity"}, 
        {bijections7, "Bijectivity"}, 
        {bijections8, "Bijectivity"}, 
        {bijections9, "Bijectivity"}, 
        {bijections10, "Bijectivity"}, 
        {bijections11, "Bijectivity"}, 
        {bijections12, "Bijectivity"}, 
        {bijections13, "Bijectivity"}, 
        {bijections14, "Bijectivity"}, 
        {bijections15, "Bijectivity"}, 
        {bijections16, "Bijectivity"}, 
        {bijections17, "Bijectivity"}, 
        {bijections18, "Bijectivity"}, 
        {bijections19, "Bijectivity"}, 
        {bijections20, "Bijectivity"}, 
        {bijections21, "Bijectivity"}, 
        {bijections22, "Bijectivity"}, 
        {bijections23, "Bijectivity"}, 
        {bijections24, "Bijectivity"}, 
    }
    return  bijection_theories
}