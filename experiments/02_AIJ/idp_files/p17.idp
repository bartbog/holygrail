// Problem p17

vocabulary V {
    type assumptiontype = {0..67} isa int
    assumption_satisfied(assumptiontype)

    type type1 constructed from {the_other_type1, high_park, casa_loma, yorkville, city_hall}
    type tour constructed from {tour_1, tour_2, tour_3, tour_4, tour_5}
    type am = {7; 8; 9; 10; 11} isa int
    type type2 constructed from {the_other_type2, zachary, janice, oscar, whitney}
    type person = {2; 5; 6; 7; 8} isa int

    start_at(tour, type1)
    begin_at(tour, am)
    of(tour, person)
    from(tour, type2)
    is_linked_with_1(type1, am)
    is_linked_with_2(type1, type2)
    is_linked_with_3(type1, person)
    is_linked_with_4(am, type2)
    is_linked_with_5(am, person)
    is_linked_with_6(type2, person)
}

vocabulary VExtra {
    extern vocabulary V
    ct_start_at(tour, type1)
    cf_start_at(tour, type1)
    ct_begin_at(tour, am)
    cf_begin_at(tour, am)
    ct_of(tour, person)
    cf_of(tour, person)
    ct_from(tour, type2)
    cf_from(tour, type2)
    ct_is_linked_with_1(type1, am)
    cf_is_linked_with_1(type1, am)
    ct_is_linked_with_2(type1, type2)
    cf_is_linked_with_2(type1, type2)
    ct_is_linked_with_3(type1, person)
    cf_is_linked_with_3(type1, person)
    ct_is_linked_with_4(am, type2)
    cf_is_linked_with_4(am, type2)
    ct_is_linked_with_5(am, person)
    cf_is_linked_with_5(am, person)
    ct_is_linked_with_6(type2, person)
    cf_is_linked_with_6(type2, person)
}

structure S : V {
        assumption_satisfied<cf>={}
        assumption_satisfied<u>={}
}

theory T1: V {
    // The 11 am tour won't start at high park
    assumption_satisfied( 0  ) => ?a [tour]: ~ start_at(a,high_park) & begin_at(a,11).
}

theory T2: V {
    // Zachary's outing will begin 1 hour before the outing starting at Casa Loma
    assumption_satisfied( 0  ) => ?b [tour] c [am] d [tour] e [am]: start_at(d,casa_loma) & begin_at(d,c) & e = c-1 & begin_at(b,e) & from(b,zachary).
}

theory T3: V {
    // The tour with 7 people will begin 3 hours before the group of 6
    assumption_satisfied( 0  ) => ?f [tour] g [am] h [tour] i [am]: of(f,7) & of(h,6) & begin_at(h,g) & i = g-3 & begin_at(f,i).
}

theory T4: V {
    // The tour with 2 people will start at Yorkville
    assumption_satisfied( 0  ) => ?j [tour]: of(j,2) & start_at(j,yorkville).
}

theory T5: V {
    // Zachary's trip will begin 3 hours before Janice's trip
    assumption_satisfied( 0  ) => ?k [tour] l [am] m [tour] n [am]: begin_at(m,l) & from(m,janice) & n = l-3 & begin_at(k,n) & from(k,zachary).
}

theory T6: V {
    // Zachary's outing will begin 2 hours before the tour starting at Yorkville
    assumption_satisfied( 0  ) => ?o [tour] p [am] q [tour] r [am]: start_at(q,yorkville) & begin_at(q,p) & r = p-2 & begin_at(o,r) & from(o,zachary).
}

theory T7: V {
    // Of the 7 am tour and Oscar's tour, one will start at Yorkville and the other will start at City Hall
    assumption_satisfied( 0  ) => ?s [tour] t [tour]: ~ (s = t) & (start_at(s,yorkville) & start_at(t,city_hall) | start_at(t,yorkville) & start_at(s,city_hall)) & from(t,oscar) & begin_at(s,7).
}

theory T8: V {
    // The outing from Whitney isn't with 5 people
    assumption_satisfied( 0  ) => ?u [tour]: from(u,whitney) & ~ of(u,5).
}

theory T9: V {
    // The Yorkville tour, the tour beginning at 9 am and the outing with 5 people are three different tours
    assumption_satisfied( 0  ) => ?v [tour] w [tour] x [tour]: ~ (v = w) & ~ (v = x) & ~ (w = x) & start_at(v,yorkville) & begin_at(w,9) & of(x,5).
}


theory bijections1 : V {
     assumption_satisfied( 1  ) => ! x [tour]: ?>=1 y [type1]: start_at(x, y).
}
theory bijections2 : V {
     assumption_satisfied( 2  ) => ! x [tour]: ?=<1 y [type1]: start_at(x, y).
}
theory bijections3 : V {
     assumption_satisfied( 3  ) => ! x [type1]: ?>=1 y [tour]: start_at(y, x).
}
theory bijections4 : V {
     assumption_satisfied( 4  ) => ! x [type1]: ?=<1 y [tour]: start_at(y, x).
}
theory bijections5 : V {
     assumption_satisfied( 5  ) => ! x [tour]: ?>=1 y [am]: begin_at(x, y).
}
theory bijections6 : V {
     assumption_satisfied( 6  ) => ! x [tour]: ?=<1 y [am]: begin_at(x, y).
}
theory bijections7 : V {
     assumption_satisfied( 7  ) => ! x [am]: ?>=1 y [tour]: begin_at(y, x).
}
theory bijections8 : V {
     assumption_satisfied( 8  ) => ! x [am]: ?=<1 y [tour]: begin_at(y, x).
}
theory bijections9 : V {
     assumption_satisfied( 9  ) => ! x [tour]: ?>=1 y [person]: of(x, y).
}
theory bijections10 : V {
     assumption_satisfied( 10  ) => ! x [tour]: ?=<1 y [person]: of(x, y).
}
theory bijections11 : V {
     assumption_satisfied( 11  ) => ! x [person]: ?>=1 y [tour]: of(y, x).
}
theory bijections12 : V {
     assumption_satisfied( 12  ) => ! x [person]: ?=<1 y [tour]: of(y, x).
}
theory bijections13 : V {
     assumption_satisfied( 13  ) => ! x [tour]: ?>=1 y [type2]: from(x, y).
}
theory bijections14 : V {
     assumption_satisfied( 14  ) => ! x [tour]: ?=<1 y [type2]: from(x, y).
}
theory bijections15 : V {
     assumption_satisfied( 15  ) => ! x [type2]: ?>=1 y [tour]: from(y, x).
}
theory bijections16 : V {
     assumption_satisfied( 16  ) => ! x [type2]: ?=<1 y [tour]: from(y, x).
}
theory bijections17 : V {
     assumption_satisfied( 17  ) => ! x [type1]: ?>=1 y [am]: is_linked_with_1(x, y).
}
theory bijections18 : V {
     assumption_satisfied( 18  ) => ! x [type1]: ?=<1 y [am]: is_linked_with_1(x, y).
}
theory bijections19 : V {
     assumption_satisfied( 19  ) => ! x [am]: ?>=1 y [type1]: is_linked_with_1(y, x).
}
theory bijections20 : V {
     assumption_satisfied( 20  ) => ! x [am]: ?=<1 y [type1]: is_linked_with_1(y, x).
}
theory bijections21 : V {
     assumption_satisfied( 21  ) =>  ! x [type1]: ?>=1 y [type2]: is_linked_with_2(x, y).
}
theory bijections22 : V {
     assumption_satisfied( 22  ) => ! x [type1]: ?=<1 y [type2]: is_linked_with_2(x, y).
}
theory bijections23 : V {
     assumption_satisfied( 23  ) =>   ! x [type2]: ?>=1 y [type1]: is_linked_with_2(y, x).
}
theory bijections24 : V {
     assumption_satisfied( 24  ) =>   ! x [type2]: ?=<1 y [type1]: is_linked_with_2(y, x).
}
theory bijections25 : V {
     assumption_satisfied( 25  ) => ! x [type1]: ?>=1 y [person]: is_linked_with_3(x, y).
}
theory bijections26 : V {
     assumption_satisfied( 26  ) => ! x [type1]: ?=<1 y [person]: is_linked_with_3(x, y).
}
theory bijections27 : V {
     assumption_satisfied( 27  ) =>  ! x [person]: ?>=1 y [type1]: is_linked_with_3(y, x).
}
theory bijections28 : V {
     assumption_satisfied( 28  ) => ! x [person]: ?=<1 y [type1]: is_linked_with_3(y, x).
}
theory bijections29 : V {
     assumption_satisfied( 29  ) => ! x [am]: ?>=1 y [type2]: is_linked_with_4(x, y).
}
theory bijections30 : V {
     assumption_satisfied( 30  ) => ! x [am]: ?=<1 y [type2]: is_linked_with_4(x, y).
}
theory bijections31 : V {
     assumption_satisfied( 31  ) =>! x [type2]: ?>=1 y [am]: is_linked_with_4(y, x).
}
theory bijections32 : V {
     assumption_satisfied( 32  ) =>  ! x [type2]: ?=<1 y [am]: is_linked_with_4(y, x).
}
theory bijections33 : V {
     assumption_satisfied( 33  ) => ! x [am]: ?>=1 y [person]: is_linked_with_5(x, y).
}
theory bijections34 : V {
     assumption_satisfied( 34  ) => ! x [am]: ?=<1 y [person]: is_linked_with_5(x, y).
}
theory bijections35 : V {
     assumption_satisfied( 35  ) => ! x [person]: ?>=1 y [am]: is_linked_with_5(y, x).
}
theory bijections36 : V {
     assumption_satisfied( 36  ) => ! x [person]: ?=<1 y [am]: is_linked_with_5(y, x).
}
theory bijections37 : V {
     assumption_satisfied( 37  ) => ! x [type2]: ?>=1 y [person]: is_linked_with_6(x, y).
}
theory bijections38 : V {
     assumption_satisfied( 38  ) => ! x [type2]: ?=<1 y [person]: is_linked_with_6(x, y).
}
theory bijections39 : V {
     assumption_satisfied( 39  ) =>  ! x [person]: ?>=1 y [type2]: is_linked_with_6(y, x).
}
theory bijections40 : V {
     assumption_satisfied( 40  ) =>  ! x [person]: ?=<1 y [type2]: is_linked_with_6(y, x).
}

theory synonyms : V {
    // Logigram synonym axioms:
    //! x [tour] y [person]: of(x, y) <=> of(x, y).

}

theory transitivity1 : V {
     assumption_satisfied( 41  ) => ! x y z: begin_at(x, z) & is_linked_with_1(y, z)=>  start_at(x, y) .
}
theory transitivity2 : V {
     assumption_satisfied( 42  ) => ! x y z:  ~begin_at(x, z) & is_linked_with_1(y, z)=> ~ start_at(x, y) .
}
theory transitivity3 : V {
     assumption_satisfied( 43  ) => ! x y z: begin_at(x, z) &  ~is_linked_with_1(y, z)=> ~ start_at(x, y) .
}
theory transitivity4 : V {
     assumption_satisfied( 44  ) => ! x y z: of(x, z) & is_linked_with_3(y, z)=>  start_at(x, y).
}
theory transitivity5 : V {
     assumption_satisfied( 45  ) => ! x y z: of(x, z) & ~is_linked_with_3(y, z)=> ~ start_at(x, y).
}
theory transitivity6 : V {
     assumption_satisfied( 46  ) => ! x y z: ~of(x, z) & is_linked_with_3(y, z)=> ~ start_at(x, y).
}
theory transitivity7 : V {
     assumption_satisfied( 47  ) => ! x y z: from(x, z) & is_linked_with_2(y, z)=>  start_at(x, y) .
}
theory transitivity8 : V {
     assumption_satisfied( 48  ) => ! x y z: ~from(x, z) & is_linked_with_2(y, z)=> ~ start_at(x, y).
}
theory transitivity9 : V {
     assumption_satisfied( 49  ) => ! x y z: from(x, z) & ~is_linked_with_2(y, z)=> ~ start_at(x, y).
}
theory transitivity10 : V {
     assumption_satisfied( 50  ) => ! x y z: of(x, z) & is_linked_with_5(y, z)=>  begin_at(x, y).
}
theory transitivity11 : V {
     assumption_satisfied( 51  ) => ! x y z: ~ of(x, z) & is_linked_with_5(y, z)=> ~ begin_at(x, y).
}
theory transitivity12 : V {
     assumption_satisfied( 52  ) => ! x y z: of(x, z) & ~ is_linked_with_5(y, z)=> ~ begin_at(x, y).
}
theory transitivity13 : V {
     assumption_satisfied( 53  ) => ! x y z: from(x, z) & is_linked_with_4(y, z)=>  begin_at(x, y).
}
theory transitivity14 : V {
     assumption_satisfied( 54  ) => ! x y z: from(x, z) & ~ is_linked_with_4(y, z)=> ~ begin_at(x, y).
}
theory transitivity15 : V {
     assumption_satisfied( 55  ) => ! x y z: ~ from(x, z) & is_linked_with_4(y, z)=> ~ begin_at(x, y).
}
theory transitivity16 : V {
     assumption_satisfied( 56  ) => ! x y z: is_linked_with_2(x, z) & is_linked_with_4(y, z)=>  is_linked_with_1(x, y).
}
theory transitivity17 : V {
     assumption_satisfied( 57  ) => ! x y z: is_linked_with_2(x, z) & ~ is_linked_with_4(y, z)=> ~ is_linked_with_1(x, y).
}
theory transitivity18 : V {
     assumption_satisfied( 58  ) => ! x y z: ~ is_linked_with_2(x, z) & is_linked_with_4(y, z)=> ~ is_linked_with_1(x, y).
}
theory transitivity19 : V {
     assumption_satisfied( 59  ) => ! x y z: is_linked_with_3(x, z) & is_linked_with_5(y, z)=>  is_linked_with_1(x, y).
}
theory transitivity20 : V {
     assumption_satisfied( 60  ) => ! x y z: is_linked_with_3(x, z) & ~ is_linked_with_5(y, z)=> ~ is_linked_with_1(x, y).
}
theory transitivity21 : V {
     assumption_satisfied( 61  ) => ! x y z: ~ is_linked_with_3(x, z) & is_linked_with_5(y, z)=> ~ is_linked_with_1(x, y).
}
theory transitivity22 : V {
     assumption_satisfied( 62  ) => ! x y z: is_linked_with_3(x, z) & is_linked_with_6(y, z)=>  is_linked_with_2(x, y).
}
theory transitivity23 : V {
     assumption_satisfied( 63  ) => ! x y z: is_linked_with_3(x, z) & ~ is_linked_with_6(y, z)=> ~ is_linked_with_2(x, y).
}
theory transitivity24 : V {
     assumption_satisfied( 64  ) => ! x y z: ~ is_linked_with_3(x, z) & is_linked_with_6(y, z)=> ~ is_linked_with_2(x, y).
}
theory transitivity25 : V {
     assumption_satisfied( 65  ) => ! x y z: is_linked_with_5(x, z) & is_linked_with_6(y, z)=>  is_linked_with_4(x, y).
}
theory transitivity26 : V {
     assumption_satisfied( 66  ) => ! x y z: is_linked_with_5(x, z) & ~ is_linked_with_6(y, z)=> ~ is_linked_with_4(x, y).
}
theory transitivity27 : V {
     assumption_satisfied( 67  ) => ! x y z: ~ is_linked_with_5(x, z) & is_linked_with_6(y, z) => ~ is_linked_with_4(x, y).
}

theory forceSomethingWrongValue : VExtra {
    ~(
        (! x [tour] y [type1]: ct_start_at(x,y) => start_at(x,y)) &
        (! x [tour] y [type1]: cf_start_at(x,y) => ~start_at(x,y)) &
        (! x [tour] y [am]: ct_begin_at(x,y) => begin_at(x,y)) &
        (! x [tour] y [am]: cf_begin_at(x,y) => ~begin_at(x,y)) &
        (! x [tour] y [person]: ct_of(x,y) => of(x,y)) &
        (! x [tour] y [person]: cf_of(x,y) => ~of(x,y)) &
        (! x [tour] y [type2]: ct_from(x,y) => from(x,y)) &
        (! x [tour] y [type2]: cf_from(x,y) => ~from(x,y)) &
        (! x [type1] y [am]: ct_is_linked_with_1(x,y) => is_linked_with_1(x,y)) &
        (! x [type1] y [am]: cf_is_linked_with_1(x,y) => ~is_linked_with_1(x,y)) &
        (! x [type1] y [type2]: ct_is_linked_with_2(x,y) => is_linked_with_2(x,y)) &
        (! x [type1] y [type2]: cf_is_linked_with_2(x,y) => ~is_linked_with_2(x,y)) &
        (! x [type1] y [person]: ct_is_linked_with_3(x,y) => is_linked_with_3(x,y)) &
        (! x [type1] y [person]: cf_is_linked_with_3(x,y) => ~is_linked_with_3(x,y)) &
        (! x [am] y [type2]: ct_is_linked_with_4(x,y) => is_linked_with_4(x,y)) &
        (! x [am] y [type2]: cf_is_linked_with_4(x,y) => ~is_linked_with_4(x,y)) &
        (! x [am] y [person]: ct_is_linked_with_5(x,y) => is_linked_with_5(x,y)) &
        (! x [am] y [person]: cf_is_linked_with_5(x,y) => ~is_linked_with_5(x,y)) &
        (! x [type2] y [person]: ct_is_linked_with_6(x,y) => is_linked_with_6(x,y)) &
        (! x [type2] y [person]: cf_is_linked_with_6(x,y) => ~is_linked_with_6(x,y)) &
        true
    ).
}

procedure diff(S1, S2) {
    S3 = clone(S1)
    removeFrom(S3[V::start_at], S2[V::start_at].ct)
    removeFrom(S3[V::start_at], S2[V::start_at].cf)
    removeFrom(S3[V::begin_at], S2[V::begin_at].ct)
    removeFrom(S3[V::begin_at], S2[V::begin_at].cf)
    removeFrom(S3[V::of], S2[V::of].ct)
    removeFrom(S3[V::of], S2[V::of].cf)
    removeFrom(S3[V::from], S2[V::from].ct)
    removeFrom(S3[V::from], S2[V::from].cf)
    removeFrom(S3[V::is_linked_with_1], S2[V::is_linked_with_1].ct)
    removeFrom(S3[V::is_linked_with_1], S2[V::is_linked_with_1].cf)
    removeFrom(S3[V::is_linked_with_2], S2[V::is_linked_with_2].ct)
    removeFrom(S3[V::is_linked_with_2], S2[V::is_linked_with_2].cf)
    removeFrom(S3[V::is_linked_with_3], S2[V::is_linked_with_3].ct)
    removeFrom(S3[V::is_linked_with_3], S2[V::is_linked_with_3].cf)
    removeFrom(S3[V::is_linked_with_4], S2[V::is_linked_with_4].ct)
    removeFrom(S3[V::is_linked_with_4], S2[V::is_linked_with_4].cf)
    removeFrom(S3[V::is_linked_with_5], S2[V::is_linked_with_5].ct)
    removeFrom(S3[V::is_linked_with_5], S2[V::is_linked_with_5].cf)
    removeFrom(S3[V::is_linked_with_6], S2[V::is_linked_with_6].ct)
    removeFrom(S3[V::is_linked_with_6], S2[V::is_linked_with_6].cf)
    return S3
}

procedure getpredlist() {
    return {
        {V::start_at, VExtra::ct_start_at, VExtra::cf_start_at},
        {V::begin_at, VExtra::ct_begin_at, VExtra::cf_begin_at},
        {V::of, VExtra::ct_of, VExtra::cf_of},
        {V::from, VExtra::ct_from, VExtra::cf_from},
        {V::is_linked_with_1, VExtra::ct_is_linked_with_1, VExtra::cf_is_linked_with_1},
        {V::is_linked_with_2, VExtra::ct_is_linked_with_2, VExtra::cf_is_linked_with_2},
        {V::is_linked_with_3, VExtra::ct_is_linked_with_3, VExtra::cf_is_linked_with_3},
        {V::is_linked_with_4, VExtra::ct_is_linked_with_4, VExtra::cf_is_linked_with_4},
        {V::is_linked_with_5, VExtra::ct_is_linked_with_5, VExtra::cf_is_linked_with_5},
        {V::is_linked_with_6, VExtra::ct_is_linked_with_6, VExtra::cf_is_linked_with_6},
    }
}

include "./generic_procedures-nested.idp"

procedure main() {
    stdoptions.cpsupport = false

    theories = {
        {T1, "The 11 am tour won't start at high park"},
        {T2, "Zachary's outing will begin 1 hour before the outing starting at Casa Loma"},
        {T3, "The tour with 7 people will begin 3 hours before the group of 6"},
        {T4, "The tour with 2 people will start at Yorkville"},
        {T5, "Zachary's trip will begin 3 hours before Janice's trip"},
        {T6, "Zachary's outing will begin 2 hours before the tour starting at Yorkville"},
        {T7, "Of the 7 am tour and Oscar's tour, one will start at Yorkville and the other will start at City Hall"},
        {T8, "The outing from Whitney isn't with 5 people"},
        {T9, "The Yorkville tour, the tour beginning at 9 am and the outing with 5 people are three different tours"},
    }

    S = compute_explanations(theories,S)

    os.exit(0)
}

procedure get_bij_theories(){
    bijection_theories = {
        {bijections1, "Bijectivity"}, 
        {bijections2, "Bijectivity"}, 
        {bijections3, "Bijectivity"}, 
        {bijections4, "Bijectivity"}, 
        {bijections5, "Bijectivity"}, 
        {bijections6, "Bijectivity"}, 
        {bijections7, "Bijectivity"}, 
        {bijections8, "Bijectivity"}, 
        {bijections9, "Bijectivity"}, 
        {bijections10, "Bijectivity"}, 
        {bijections11, "Bijectivity"}, 
        {bijections12, "Bijectivity"}, 
        {bijections13, "Bijectivity"}, 
        {bijections14, "Bijectivity"}, 
        {bijections15, "Bijectivity"}, 
        {bijections16, "Bijectivity"}, 
        {bijections17, "Bijectivity"}, 
        {bijections18, "Bijectivity"}, 
        {bijections19, "Bijectivity"}, 
        {bijections20, "Bijectivity"}, 
        {bijections21, "Bijectivity"}, 
        {bijections22, "Bijectivity"}, 
        {bijections23, "Bijectivity"}, 
        {bijections24, "Bijectivity"}, 
        {bijections25, "Bijectivity"}, 
        {bijections26, "Bijectivity"}, 
        {bijections27, "Bijectivity"}, 
        {bijections28, "Bijectivity"}, 
        {bijections29, "Bijectivity"}, 
        {bijections30, "Bijectivity"}, 
        {bijections31, "Bijectivity"}, 
        {bijections32, "Bijectivity"}, 
        {bijections33, "Bijectivity"}, 
        {bijections34, "Bijectivity"}, 
        {bijections35, "Bijectivity"}, 
        {bijections36, "Bijectivity"}, 
        {bijections37, "Bijectivity"}, 
        {bijections38, "Bijectivity"}, 
        {bijections39, "Bijectivity"}, 
        {bijections40, "Bijectivity"}, 
    }
    return  bijection_theories
}

procedure get_trans_theories(){
    transitivity_theories = {
        {transitivity1, "Transitivity constraint"}, 
        {transitivity2, "Transitivity constraint"}, 
        {transitivity3, "Transitivity constraint"}, 
        {transitivity4, "Transitivity constraint"}, 
        {transitivity5, "Transitivity constraint"}, 
        {transitivity6, "Transitivity constraint"}, 
        {transitivity7, "Transitivity constraint"}, 
        {transitivity8, "Transitivity constraint"}, 
        {transitivity9, "Transitivity constraint"}, 
        {transitivity10, "Transitivity constraint"}, 
        {transitivity11, "Transitivity constraint"}, 
        {transitivity12, "Transitivity constraint"}, 
        {transitivity13, "Transitivity constraint"}, 
        {transitivity14, "Transitivity constraint"}, 
        {transitivity15, "Transitivity constraint"}, 
        {transitivity16, "Transitivity constraint"}, 
        {transitivity17, "Transitivity constraint"}, 
        {transitivity18, "Transitivity constraint"}, 
        {transitivity19, "Transitivity constraint"}, 
        {transitivity20, "Transitivity constraint"}, 
        {transitivity21, "Transitivity constraint"}, 
        {transitivity22, "Transitivity constraint"}, 
        {transitivity23, "Transitivity constraint"}, 
        {transitivity24, "Transitivity constraint"}, 
        {transitivity25, "Transitivity constraint"}, 
        {transitivity26, "Transitivity constraint"}, 
        {transitivity27, "Transitivity constraint"}, 
    }
    return transitivity_theories
}
