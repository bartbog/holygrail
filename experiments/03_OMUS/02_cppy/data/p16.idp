// Problem p16

vocabulary V {

    type assumptiontype = {0..36} isa int
    assumption_satisfied(assumptiontype)
    
    type type1 constructed from {the_other_type1, rings, mobile_phones, flashlights, rubber_balls}
    type juggler constructed from {the_other_juggler, howard, otis, gerald, floyd}
    type type2 constructed from {the_other_type2, quasqueton, kingsburg, carbon, nice}
    type spot = {1; 2; 3; 4; 5} isa int

    used(juggler, type1)
    from(juggler, type2)
    went(juggler, spot)
    is_linked_with_1(type1, type2)
    is_linked_with_2(type1, spot)
    is_linked_with_3(type2, spot)
}

vocabulary VExtra {
    extern vocabulary V
    ct_used(juggler, type1)
    cf_used(juggler, type1)
    ct_from(juggler, type2)
    cf_from(juggler, type2)
    ct_went(juggler, spot)
    cf_went(juggler, spot)
    ct_is_linked_with_1(type1, type2)
    cf_is_linked_with_1(type1, type2)
    ct_is_linked_with_2(type1, spot)
    cf_is_linked_with_2(type1, spot)
    ct_is_linked_with_3(type2, spot)
    cf_is_linked_with_3(type2, spot)
}

structure S : V {
        assumption_satisfied<cf>={}
        assumption_satisfied<u>={}
}

theory T1: V {
    // The juggler who went fourth was either the performer from Quasqueton or the juggler who used rings
    assumption_satisfied( 0  ) => ?a [juggler]: went(a,4) & ((?b [juggler]: from(b,quasqueton) & b = a) | (?c [juggler]: used(c,rings) & c = a)).
}

theory T2: V {
    // The juggler who used flashlights performed one spot after the person who used mobile phones
    assumption_satisfied( 0  ) => ?d [juggler] e [spot] f [juggler] g [spot]: used(d,flashlights) & used(f,mobile_phones) & went(f,e) & g = e+1 & went(d,g).
}

theory T3: V {
    // The performer from Kingsburg performed one spot before Howard
    assumption_satisfied( 0  ) => ?h [juggler] i [spot] j [spot]: from(h,kingsburg) & went(howard,i) & j = i-1 & went(h,j).
}

theory T4: V {
    // Otis wasn't from Carbon
    assumption_satisfied( 0  ) => ~ from(otis,carbon).
}

theory T5: V {
    // Of the performer who went second and the juggler who used rings, one was from Carbon and the other is Howard
    assumption_satisfied( 0  ) => ?k [juggler] l [juggler]: went(k,2) & used(l,rings) & ~ (k = l) & (from(k,carbon) & howard = l | from(l,carbon) & howard = k).
}

theory T6: V {
    // The performer who went third, Gerald and the person from Kingsburg are three different people
    assumption_satisfied( 0  ) => ?m [juggler] n [juggler]: ~ (m = gerald) & ~ (m = n) & ~ (gerald = n) & went(m,3) & from(n,kingsburg).
}

theory T7: V {
    // Floyd was either the juggler who went second or the juggler from Quasqueton
    assumption_satisfied( 0  ) => (?o [juggler]: went(o,2) & o = floyd) | (?p [juggler]: from(p,quasqueton) & p = floyd).
}

theory T8: V {
    // The person who went third used rings
    assumption_satisfied( 0  ) => ?q [juggler]: went(q,3) & used(q,rings).
}

theory T9: V {
    // The juggler who went second wasn't from Nice
   assumption_satisfied( 0  ) =>  ?r [juggler]: went(r,2) & ~ from(r,nice).
}

theory T10: V {
    // Floyd juggles rubber balls
    assumption_satisfied( 0  ) => used(floyd,rubber_balls).
}

theory bijections1 : V {
     assumption_satisfied( 1  ) => ! x [juggler]: ?>=1 y [type1]: used(x, y).
}
theory bijections2 : V {
     assumption_satisfied( 2  ) => ! x [juggler]: ?=<1 y [type1]: used(x, y).
}
theory bijections3 : V {
     assumption_satisfied( 3  ) => ! x [type1]: ?>=1 y [juggler]: used(y, x).
}
theory bijections4 : V {
     assumption_satisfied( 4  ) => ! x [type1]: ?=<1 y [juggler]: used(y, x).
}
theory bijections5 : V {
     assumption_satisfied( 5  ) => ! x [juggler]: ?>=1 y [type2]: from(x, y).
}
theory bijections6 : V {
     assumption_satisfied( 6  ) => ! x [juggler]: ?=<1 y [type2]: from(x, y).
}
theory bijections7 : V {
     assumption_satisfied( 7  ) => ! x [type2]: ?>=1 y [juggler]: from(y, x).
}
theory bijections8 : V {
     assumption_satisfied( 8  ) => ! x [type2]: ?=<1 y [juggler]: from(y, x).
}
theory bijections9 : V {
     assumption_satisfied( 9  ) => ! x [juggler]: ?>=1 y [spot]: went(x, y).
}
theory bijections10 : V {
     assumption_satisfied( 10  ) => ! x [juggler]: ?=<1 y [spot]: went(x, y).
}
theory bijections11 : V {
     assumption_satisfied( 11  ) => ! x [spot]: ?>=1 y [juggler]: went(y, x).
}
theory bijections12 : V {
     assumption_satisfied( 12  ) => ! x [spot]: ?=<1 y [juggler]: went(y, x).
}
theory bijections13 : V {
     assumption_satisfied( 13  ) => ! x [type1]: ?>=1 y [type2]: is_linked_with_1(x, y).
}
theory bijections14 : V {
     assumption_satisfied( 14  ) => ! x [type1]: ?=<1 y [type2]: is_linked_with_1(x, y).
}
theory bijections15 : V {
     assumption_satisfied( 15  ) => ! x [type2]: ?>=1 y [type1]: is_linked_with_1(y, x).
}
theory bijections16 : V {
     assumption_satisfied( 16  ) => ! x [type2]: ?=<1 y [type1]: is_linked_with_1(y, x).
}
theory bijections17 : V {
     assumption_satisfied( 17  ) => ! x [type1]: ?>=1 y [spot]: is_linked_with_2(x, y).
}
theory bijections18 : V {
     assumption_satisfied( 18  ) => ! x [type1]: ?=<1 y [spot]: is_linked_with_2(x, y).
}
theory bijections19 : V {
     assumption_satisfied( 19  ) => ! x [spot]: ?>=1 y [type1]: is_linked_with_2(y, x).
}
theory bijections20 : V {
     assumption_satisfied( 20  ) => ! x [spot]: ?=<1 y [type1]: is_linked_with_2(y, x).
}
theory bijections21 : V {
     assumption_satisfied( 21  ) => ! x [type2]: ?>=1 y [spot]: is_linked_with_3(x, y).
}
theory bijections22 : V {
     assumption_satisfied( 22  ) => ! x [type2]: ?=<1 y [spot]: is_linked_with_3(x, y).
}
theory bijections23 : V {
     assumption_satisfied( 23  ) => ! x [spot]: ?>=1 y [type2]: is_linked_with_3(y, x).
}
theory bijections24 : V {
     assumption_satisfied( 24  ) => ! x [spot]: ?=<1 y [type2]: is_linked_with_3(y, x).
}

theory synonyms : V {
    // Logigram synonym axioms:
    //! x [juggler] y [type1]: used(x, y) <=> used(x, y).
    //! x [juggler] y [spot]: went(x, y) <=> went(x, y).

}

theory transitivity1 : V {
     assumption_satisfied( 25  ) => ! x y z: from(x, z) & is_linked_with_1(y, z)=>  used(x, y).
}
theory transitivity2 : V {
     assumption_satisfied( 26  ) => ! x y z: ~from(x, z) & is_linked_with_1(y, z)=> ~ used(x, y).
}
theory transitivity3 : V {
     assumption_satisfied( 27  ) => ! x y z: from(x, z) & ~is_linked_with_1(y, z)=> ~ used(x, y).
}
theory transitivity4 : V {
     assumption_satisfied( 28  ) => ! x y z: went(x, z) & is_linked_with_2(y, z)=>  used(x, y).
}
theory transitivity5 : V {
     assumption_satisfied( 29  ) => ! x y z: ~went(x, z) & is_linked_with_2(y, z)=> ~ used(x, y).
}
theory transitivity6 : V {
     assumption_satisfied( 30  ) => ! x y z: went(x, z) & ~is_linked_with_2(y, z)=> ~ used(x, y).
}
theory transitivity7 : V {
     assumption_satisfied( 31  ) => ! x y z: went(x, z) & is_linked_with_3(y, z)=>  from(x, y).
}
theory transitivity8 : V {
     assumption_satisfied( 32  ) => ! x y z: ~went(x, z) & is_linked_with_3(y, z)=> ~ from(x, y).
}
theory transitivity9 : V {
     assumption_satisfied( 33  ) => ! x y z: went(x, z) & ~is_linked_with_3(y, z)=> ~from(x, y) .
}
theory transitivity10 : V {
     assumption_satisfied( 34  ) => ! x y z: is_linked_with_2(x, z) & is_linked_with_3(y, z)=>  is_linked_with_1(x, y).
}
theory transitivity11 : V {
     assumption_satisfied( 35  ) => ! x y z: ~is_linked_with_2(x, z) & is_linked_with_3(y, z)=> ~ is_linked_with_1(x, y).
}
theory transitivity12 : V {
     assumption_satisfied( 36  ) => ! x y z: is_linked_with_2(x, z) & ~is_linked_with_3(y, z)=> ~ is_linked_with_1(x, y).
}


theory forceSomethingWrongValue : VExtra {
    ~(
        (! x [juggler] y [type1]: ct_used(x,y) => used(x,y)) &
        (! x [juggler] y [type1]: cf_used(x,y) => ~used(x,y)) &
        (! x [juggler] y [type2]: ct_from(x,y) => from(x,y)) &
        (! x [juggler] y [type2]: cf_from(x,y) => ~from(x,y)) &
        (! x [juggler] y [spot]: ct_went(x,y) => went(x,y)) &
        (! x [juggler] y [spot]: cf_went(x,y) => ~went(x,y)) &
        (! x [type1] y [type2]: ct_is_linked_with_1(x,y) => is_linked_with_1(x,y)) &
        (! x [type1] y [type2]: cf_is_linked_with_1(x,y) => ~is_linked_with_1(x,y)) &
        (! x [type1] y [spot]: ct_is_linked_with_2(x,y) => is_linked_with_2(x,y)) &
        (! x [type1] y [spot]: cf_is_linked_with_2(x,y) => ~is_linked_with_2(x,y)) &
        (! x [type2] y [spot]: ct_is_linked_with_3(x,y) => is_linked_with_3(x,y)) &
        (! x [type2] y [spot]: cf_is_linked_with_3(x,y) => ~is_linked_with_3(x,y)) &
        true
    ).
}

procedure diff(S1, S2) {
    S3 = clone(S1)
    removeFrom(S3[V::used], S2[V::used].ct)
    removeFrom(S3[V::used], S2[V::used].cf)
    removeFrom(S3[V::from], S2[V::from].ct)
    removeFrom(S3[V::from], S2[V::from].cf)
    removeFrom(S3[V::went], S2[V::went].ct)
    removeFrom(S3[V::went], S2[V::went].cf)
    removeFrom(S3[V::is_linked_with_1], S2[V::is_linked_with_1].ct)
    removeFrom(S3[V::is_linked_with_1], S2[V::is_linked_with_1].cf)
    removeFrom(S3[V::is_linked_with_2], S2[V::is_linked_with_2].ct)
    removeFrom(S3[V::is_linked_with_2], S2[V::is_linked_with_2].cf)
    removeFrom(S3[V::is_linked_with_3], S2[V::is_linked_with_3].ct)
    removeFrom(S3[V::is_linked_with_3], S2[V::is_linked_with_3].cf)
    return S3
}

procedure getpredlist() {
    return {
        {V::used, VExtra::ct_used, VExtra::cf_used},
        {V::from, VExtra::ct_from, VExtra::cf_from},
        {V::went, VExtra::ct_went, VExtra::cf_went},
        {V::is_linked_with_1, VExtra::ct_is_linked_with_1, VExtra::cf_is_linked_with_1},
        {V::is_linked_with_2, VExtra::ct_is_linked_with_2, VExtra::cf_is_linked_with_2},
        {V::is_linked_with_3, VExtra::ct_is_linked_with_3, VExtra::cf_is_linked_with_3},
    }
}

include "./generic_procedures-split.idp"

procedure main() {
    stdoptions.cpsupport = false

    theories = {
        {T1, "The juggler who went fourth was either the performer from Quasqueton or the juggler who used rings"},
        {T2, "The juggler who used flashlights performed one spot after the person who used mobile phones"},
        {T3, "The performer from Kingsburg performed one spot before Howard"},
        {T4, "Otis wasn't from Carbon"},
        {T5, "Of the performer who went second and the juggler who used rings, one was from Carbon and the other is Howard"},
        {T6, "The performer who went third, Gerald and the person from Kingsburg are three different people"},
        {T7, "Floyd was either the juggler who went second or the juggler from Quasqueton"},
        {T8, "The person who went third used rings"},
        {T9, "The juggler who went second wasn't from Nice"},
        {T10, "Floyd juggles rubber balls"},
    }

    S = compute_explanations(theories,S)

    os.exit(0)
}

procedure get_bij_theories(){
    bijection_theories = {
        {bijections1, "Bijectivity"}, 
        {bijections2, "Bijectivity"}, 
        {bijections3, "Bijectivity"}, 
        {bijections4, "Bijectivity"}, 
        {bijections5, "Bijectivity"}, 
        {bijections6, "Bijectivity"}, 
        {bijections7, "Bijectivity"}, 
        {bijections8, "Bijectivity"}, 
        {bijections9, "Bijectivity"}, 
        {bijections10, "Bijectivity"}, 
        {bijections11, "Bijectivity"}, 
        {bijections12, "Bijectivity"}, 
        {bijections13, "Bijectivity"}, 
        {bijections14, "Bijectivity"}, 
        {bijections15, "Bijectivity"}, 
        {bijections16, "Bijectivity"}, 
        {bijections17, "Bijectivity"}, 
        {bijections18, "Bijectivity"}, 
        {bijections19, "Bijectivity"}, 
        {bijections20, "Bijectivity"}, 
        {bijections21, "Bijectivity"}, 
        {bijections22, "Bijectivity"}, 
        {bijections23, "Bijectivity"}, 
        {bijections24, "Bijectivity"} 
    }
    return  bijection_theories
}

procedure get_trans_theories(){
    transitivity_theories = {
        {transitivity1, "Transitivity constraint"}, 
        {transitivity2, "Transitivity constraint"}, 
        {transitivity3, "Transitivity constraint"}, 
        {transitivity4, "Transitivity constraint"}, 
        {transitivity5, "Transitivity constraint"}, 
        {transitivity6, "Transitivity constraint"}, 
        {transitivity7, "Transitivity constraint"}, 
        {transitivity8, "Transitivity constraint"}, 
        {transitivity9, "Transitivity constraint"}, 
        {transitivity10, "Transitivity constraint"}, 
        {transitivity11, "Transitivity constraint"}, 
        {transitivity12, "Transitivity constraint"}
    }
    return transitivity_theories
}