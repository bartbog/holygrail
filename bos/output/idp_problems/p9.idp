// Problem p9

vocabulary V {
    type class constructed from {class_1, class_2, class_3, class_4, class_5}
    type am = {9; 10; 11; 12; 13} isa int
    type year = {15; 17; 18; 20; 21} isa int
    type client constructed from {the_other_client, harold, opal, jerry, elmer}
    type type1 constructed from {the_other_type1, mr_terry, mr_alford, mr_french, mr_underwood}
    type type2 = {-1; 1; -2; 2; -3; 3; -4; 4} isa int // differences between values of type am

    unknown_relation_class_am(class, am)
    is_old(client, year)
    with(client, class)
    scheduled_at(client, am)
    is_being_trained_by(client, type1)
}

structure S : V {
}

theory T : V {
    // The client with the 10 am class isn't 17 or 21 years old
    ?a [client] b [class]: with(a,b) & unknown_relation_class_am(b,10) & ~ (is_old(a,17) | is_old(a,21)).

    // Opal isn't 20 years old and is scheduled 2 hours after Harold
    ?c [am] d [am]: ~ is_old(opal,20) & scheduled_at(harold,c) & d = c+2 & scheduled_at(opal,d).

    // Harold is being trained by Mr Terry and isn't 17 years old
    is_being_trained_by(harold,mr_terry) & ~ is_old(harold,17).

    // Mr alford's client isn't 17 years old and is scheduled sometime before the trainee who is 15 year old and 2 hours after Harold
    ?e [client] f [type2] g [am] h [client] i [am] j [am] k [am]: ~ is_old(e,17) & f>0 & is_old(h,15) & scheduled_at(h,g) & i = g-f & scheduled_at(e,i) & scheduled_at(harold,j) & k = j+2 & scheduled_at(e,k) & is_being_trained_by(e,mr_alford).

    // Mr french's trainee isn't 20 years old and is scheduled 1 hour after mr terry's client
    ?l [client] m [am] n [client] o [am]: ~ is_old(l,20) & scheduled_at(n,m) & is_being_trained_by(n,mr_terry) & o = m+1 & scheduled_at(l,o) & is_being_trained_by(l,mr_french).

    // Elmer is being trained by Mr underwood and is scheduled 2 hours after jerry
    ?p [am] q [am]: is_being_trained_by(elmer,mr_underwood) & scheduled_at(jerry,p) & q = p+2 & scheduled_at(elmer,q).

    // Elmer isn't 15 years old
    ~ is_old(elmer,15).


    // Logigram bijection axioms:
    ! x [class]: ?=1 y [am]: unknown_relation_class_am(x, y).
    ! x [am]: ?=1 y [class]: unknown_relation_class_am(y, x).

    ! x [client]: ?=1 y [year]: is_old(x, y).
    ! x [year]: ?=1 y [client]: is_old(y, x).

    ! x [client]: ?=1 y [class]: with(x, y).
    ! x [class]: ?=1 y [client]: with(y, x).

    ! x [client]: ?=1 y [am]: scheduled_at(x, y).
    ! x [am]: ?=1 y [client]: scheduled_at(y, x).

    ! x [client]: ?=1 y [type1]: is_being_trained_by(x, y).
    ! x [type1]: ?=1 y [client]: is_being_trained_by(y, x).

    // Logigram synonym axioms:

    // Logigram transitive relation axioms:
    ! x [class] y [am]: unknown_relation_class_am(x, y) <=> ? z [client]: with(z, x) & scheduled_at(z, y).

    // Logigram reflexive relation axioms:

    // Logigram symmetry breaking axioms:
    unknown_relation_class_am(class_1, 9).
    unknown_relation_class_am(class_2, 10).
    unknown_relation_class_am(class_3, 11).
    unknown_relation_class_am(class_4, 12).
    unknown_relation_class_am(class_5, 13).
}

procedure main() {
    stdoptions.nbmodels = 10;
    printmodels(modelexpand(T,S))
}

